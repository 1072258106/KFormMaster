{
    "docs": [
        {
            "location": "/",
            "text": "Installation\n\u00b6\n\n\nAdd this in your app's \nbuild.gradle\n file:\n\n\next {\n  kFormMasterVersion = [Latest]\n}\n\nimplementation \"com.thejuki:k-form-master:$kFormMasterVersion\"\n\n\n\n\n\nHow to use\n\u00b6\n\n\n\n\nStep 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo).\n\n\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n<LinearLayout\n\n    \nxmlns:android=\n\"http://schemas.android.com/apk/res/android\"\n\n    \nxmlns:tools=\n\"http://schemas.android.com/tools\"\n\n    \nandroid:layout_width=\n\"match_parent\"\n\n    \nandroid:layout_height=\n\"match_parent\"\n\n    \nandroid:orientation=\n\"vertical\"\n>\n\n\n    \n<android.support.v7.widget.RecyclerView\n\n        \nandroid:layout_width=\n\"match_parent\"\n\n        \nandroid:layout_height=\n\"match_parent\"\n\n        \nandroid:orientation=\n\"vertical\"\n\n        \nandroid:id=\n\"@+id/recyclerView\"\n\n        \nandroid:descendantFocusability=\n\"beforeDescendants\"\n \n/>\n\n\n\n</LinearLayout>\n\n\n\n\n\n\n\n\nStep 2 (No DSL). Add the Form Elements programmatically in your activity\n\n\n\n\n// Initialize variables\n\n\nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n)\n\n\nformBuilder\n.\nattachRecyclerView\n(\nthis\n,\n \nrecyclerView\n)\n\n\n\nval\n \nelements\n:\n \nMutableList\n<\nBaseFormElement\n<*>>\n \n=\n \nmutableListOf\n()\n\n\n\n// Declare form elements\n\n\nval\n \nemailElement\n \n=\n \nFormEmailEditTextElement\n(\nEmail\n.\nordinal\n)\n\n        \n.\nsetTitle\n(\ngetString\n(\nR\n.\nstring\n.\nemail\n))\n\n\nelements\n.\nadd\n(\nemailElement\n)\n\n\n\nval\n \npasswordElement\n \n=\n \nFormPasswordEditTextElement\n(\nPassword\n.\nordinal\n)\n\n        \n.\nsetTitle\n(\ngetString\n(\nR\n.\nstring\n.\npassword\n))\n\n\nelements\n.\nadd\n(\npasswordElement\n)\n\n\n\n// Add form elements (Form is refreshed for you)\n\n\nformBuilder\n.\naddFormElements\n(\nelements\n)\n\n\n\n\n\n\n\n\nStep 2 (With DSL). Add the Form Elements programmatically in your activity\n\n\n\n\nformBuilder\n \n=\n \nform\n(\nthis\n,\n \nrecyclerView\n)\n \n{\n\n    \nemail\n(\nEmail\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nemail\n)\n\n    \n}\n\n    \npassword\n(\nPassword\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\npassword\n)\n\n    \n}\n\n\n}",
            "title": "Getting Started"
        },
        {
            "location": "/#installation",
            "text": "Add this in your app's  build.gradle  file:  ext {\n  kFormMasterVersion = [Latest]\n}\n\nimplementation \"com.thejuki:k-form-master:$kFormMasterVersion\"",
            "title": "Installation"
        },
        {
            "location": "/#how-to-use",
            "text": "Step 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo).   <?xml version=\"1.0\" encoding=\"utf-8\"?>  <LinearLayout \n     xmlns:android= \"http://schemas.android.com/apk/res/android\" \n     xmlns:tools= \"http://schemas.android.com/tools\" \n     android:layout_width= \"match_parent\" \n     android:layout_height= \"match_parent\" \n     android:orientation= \"vertical\" > \n\n     <android.support.v7.widget.RecyclerView \n         android:layout_width= \"match_parent\" \n         android:layout_height= \"match_parent\" \n         android:orientation= \"vertical\" \n         android:id= \"@+id/recyclerView\" \n         android:descendantFocusability= \"beforeDescendants\"   />  </LinearLayout>    Step 2 (No DSL). Add the Form Elements programmatically in your activity   // Initialize variables  formBuilder   =   FormBuildHelper ( this )  formBuilder . attachRecyclerView ( this ,   recyclerView )  val   elements :   MutableList < BaseFormElement <*>>   =   mutableListOf ()  // Declare form elements  val   emailElement   =   FormEmailEditTextElement ( Email . ordinal ) \n         . setTitle ( getString ( R . string . email ))  elements . add ( emailElement )  val   passwordElement   =   FormPasswordEditTextElement ( Password . ordinal ) \n         . setTitle ( getString ( R . string . password ))  elements . add ( passwordElement )  // Add form elements (Form is refreshed for you)  formBuilder . addFormElements ( elements )    Step 2 (With DSL). Add the Form Elements programmatically in your activity   formBuilder   =   form ( this ,   recyclerView )   { \n     email ( Email . ordinal )   { \n         title   =   getString ( R . string . email ) \n     } \n     password ( Password . ordinal )   { \n         title   =   getString ( R . string . password ) \n     }  }",
            "title": "How to use"
        },
        {
            "location": "/helper/",
            "text": "Cache Form Elements\n\u00b6\n\n\nBy default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled.\nNOTE: This is enabled by default.\n\n\nRefresh Dropdown or MultiCheckBox options\n\u00b6\n\n\nAfter changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.\n\n\nelement\n.\noptions\n \n=\n \nlistOf\n()\n\n\nelement\n.\nreInitDialog\n(\nthis\n \n/* context */\n,\n \nformBuilder\n)\n\n\n\n\n\n\nSet form element value change listener to get changed value instantly\n\u00b6\n\n\nWhile creating a new instance of FormBuildHelper, add a listener in the constructor.\n\n\nvar\n \nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n,\n \nobject\n \n: \nOnFormElementValueChangedListener\n \n{\n\n    \noverride\n \nfun\n \nonValueChanged\n(\nformElement\n:\n \nBaseFormElement\n<*>)\n \n{\n\n         \n// do anything here with formElement.value\n\n    \n}\n\n\n},\n \nfindViewById\n(\nR\n.\nid\n.\nrecyclerView\n),\n \ncacheForm\n \n=\n \ntrue\n)\n\n\n\n\n\n\nGet value for unique form elements\n\u00b6\n\n\nUse the unique tag assigned earlier to retrieve value (See examples in this repo).\n\n\nval\n \nelement\n \n=\n \nformBuilder\n.\ngetFormElement\n<\nFormEmailEditTextElement\n>(\nEmail\n.\nordinal\n)\n\n\nval\n \nvalue\n:\n \nString\n \n=\n \nelement\n.\nvalue\n\n\n\n\n\n\nUse the added index of the element instead if you did not assign a tag.\n\n\nval\n \nelement\n \n=\n \nformBuilder\n.\ngetElementAtIndex\n(\n2\n)\n\n\nval\n \nvalue\n:\n \nString\n \n=\n \nelement\n?.\nvalue\n \nas\n \nString\n\n\n\n\n\n\nCheck if the form is valid\n\u00b6\n\n\nUse this variable (method in Java) if you need to check whether the required elements of the form are completed.\n\n\nformBuilder\n.\nisValidForm\n \n// returns Boolean of whether the form is valid or not\n\n\n\n\n\n\nClear all values\n\u00b6\n\n\nClear all values of the form elements by calling clearAll().\n\n\nformBuilder\n.\nclearAll\n()\n\n\n\n\n\n\nAdd Form Element\n\u00b6\n\n\nAdd one form element. Note that setItems() needs to be called afterward.\n\n\nformBuilder\n.\naddFormElement\n(\nFormButtonElement\n())\n\n\nformBuilder\n.\nsetItems\n()\n\n\n\n\n\n\nAdd Form Elements\n\u00b6\n\n\nAdd multiple form elements.\n\n\nval\n \nelements\n:\n \nMutableList\n<\nBaseFormElement\n<*>>\n \n=\n \nmutableListOf\n()\n\n\nformBuilder\n.\naddFormElements\n(\nelements\n)\n\n\n\n\n\n\nAuto Measure Enabled\n\u00b6\n\n\nBy default this is false.\nEnable autoMeasureEnabled when the layout_height of recyclerView is wrap_content such as the LoginFormActivity example.\n\n\nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n,\n \nrecyclerView\n,\n \nautoMeasureEnabled\n \n=\n \ntrue\n)\n\n\n\n\n\n\nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n)\n\n\nformBuilder\n.\nattachRecyclerView\n(\nthis\n,\n \nrecyclerView\n,\n \nautoMeasureEnabled\n \n=\n \ntrue\n)",
            "title": "Form Build Helper"
        },
        {
            "location": "/helper/#cache-form-elements",
            "text": "By default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled.\nNOTE: This is enabled by default.",
            "title": "Cache Form Elements"
        },
        {
            "location": "/helper/#refresh-dropdown-or-multicheckbox-options",
            "text": "After changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.  element . options   =   listOf ()  element . reInitDialog ( this   /* context */ ,   formBuilder )",
            "title": "Refresh Dropdown or MultiCheckBox options"
        },
        {
            "location": "/helper/#set-form-element-value-change-listener-to-get-changed-value-instantly",
            "text": "While creating a new instance of FormBuildHelper, add a listener in the constructor.  var   formBuilder   =   FormBuildHelper ( this ,   object   :  OnFormElementValueChangedListener   { \n     override   fun   onValueChanged ( formElement :   BaseFormElement <*>)   { \n          // do anything here with formElement.value \n     }  },   findViewById ( R . id . recyclerView ),   cacheForm   =   true )",
            "title": "Set form element value change listener to get changed value instantly"
        },
        {
            "location": "/helper/#get-value-for-unique-form-elements",
            "text": "Use the unique tag assigned earlier to retrieve value (See examples in this repo).  val   element   =   formBuilder . getFormElement < FormEmailEditTextElement >( Email . ordinal )  val   value :   String   =   element . value   Use the added index of the element instead if you did not assign a tag.  val   element   =   formBuilder . getElementAtIndex ( 2 )  val   value :   String   =   element ?. value   as   String",
            "title": "Get value for unique form elements"
        },
        {
            "location": "/helper/#check-if-the-form-is-valid",
            "text": "Use this variable (method in Java) if you need to check whether the required elements of the form are completed.  formBuilder . isValidForm   // returns Boolean of whether the form is valid or not",
            "title": "Check if the form is valid"
        },
        {
            "location": "/helper/#clear-all-values",
            "text": "Clear all values of the form elements by calling clearAll().  formBuilder . clearAll ()",
            "title": "Clear all values"
        },
        {
            "location": "/helper/#add-form-element",
            "text": "Add one form element. Note that setItems() needs to be called afterward.  formBuilder . addFormElement ( FormButtonElement ())  formBuilder . setItems ()",
            "title": "Add Form Element"
        },
        {
            "location": "/helper/#add-form-elements",
            "text": "Add multiple form elements.  val   elements :   MutableList < BaseFormElement <*>>   =   mutableListOf ()  formBuilder . addFormElements ( elements )",
            "title": "Add Form Elements"
        },
        {
            "location": "/helper/#auto-measure-enabled",
            "text": "By default this is false.\nEnable autoMeasureEnabled when the layout_height of recyclerView is wrap_content such as the LoginFormActivity example.  formBuilder   =   FormBuildHelper ( this ,   recyclerView ,   autoMeasureEnabled   =   true )   formBuilder   =   FormBuildHelper ( this )  formBuilder . attachRecyclerView ( this ,   recyclerView ,   autoMeasureEnabled   =   true )",
            "title": "Auto Measure Enabled"
        },
        {
            "location": "/element/base/",
            "text": "Common values used by multiple form elements are stored in the base form element model such as tag, title, and value.\n\n\n\n\nBase Value Requirements\n\n\nNone of the base values are required but providing a title is advised.\n\n\n\n\nTag\n\u00b6\n\n\nThe tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list.\n\n\ntext\n(\n1\n)\n \n{\n\n\n\n}\n\n\nemail\n(\nTag\n.\nEmail\n.\nordinal\n)\n \n{\n\n\n\n}\n\n\n\n\n\n\nval\n \ntextElement\n \n=\n \nformBuilder\n.\ngetElementAtIndex\n(\n0\n)\n \nas\n \nFormSingleLineEditTextElement\n\n\nval\n \nemailElement\n \n=\n \nformBuilder\n.\ngetFormElement\n<\nFormEmailEditTextElement\n>(\nTag\n.\nEmail\n.\nordinal\n)\n\n\n\n\n\n\nTitle\n\u00b6\n\n\nThe title is the text displayed next to the value of the form element.\n\n\ntext\n \n{\n\n    \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\ntitle\n)\n\n\n}\n\n\n\n\n\n\nValue\n\u00b6\n\n\nThe value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice.\n\n\ntext\n \n{\n\n    \nvalue\n \n=\n \n\"Hello World\"\n\n\n}\n\n\nautoComplete\n<\nContactItem\n>\n \n{\n\n    \nvalue\n \n=\n \nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"John Smith\"\n)\n\n\n}\n\n\n\n\n\n\nValue Observers\n\u00b6\n\n\nThe list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element.\n\n\ntext\n \n{\n\n    \nvalue\n \n=\n \n\"Hello World\"\n\n    \nvalueObservers\n.\nadd\n({\n \nnewValue\n,\n \nelement\n \n->\n\n        \nToast\n.\nmakeText\n(\nthis\n@FormActivity\n,\n \nnewValue\n,\n \nLENGTH_SHORT\n).\nshow\n()\n\n    \n})\n\n\n}\n\n\n\n\n\n\nOptions\n\u00b6\n\n\nThe list of options is used in form elements such as the Form Picker Dropdown Element and Form Picker MultiCheckBox Element. \n\n\nprivate\n \nval\n \nfruits\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n2\n,\n \nname\n \n=\n \n\"Orange\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n3\n,\n \nname\n \n=\n \n\"Mango\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n4\n,\n \nname\n \n=\n \n\"Guava\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n5\n,\n \nname\n \n=\n \n\"Apple\"\n)\n\n\n)\n\n\n\ndropDown\n<\nListItem\n>\n \n{\n\n    \noptions\n \n=\n \nfruits\n\n    \nvalue\n \n=\n \nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n)\n\n\n}\n\n\nmultiCheckBox\n<\nList\n<\nListItem\n>>\n \n{\n\n    \noptions\n \n=\n \nfruits\n\n    \nvalue\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n))\n\n\n}\n\n\n\n\n\n\nUpdating options later\n\u00b6\n\n\nAfter changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.\n\n\nelement\n.\noptions\n \n=\n \nlistOf\n()\n\n\nelement\n.\nreInitDialog\n(\nthis\n \n/* context */\n,\n \nformBuilder\n)\n\n\n\n\n\n\nHint\n\u00b6\n\n\nThe hint is the hint (or placeholder) of the value field.\n\n\ntext\n \n{\n\n    \nhint\n \n=\n \n\"Enter a name\"\n\n\n}\n\n\n\n\n\n\nMax Lines\n\u00b6\n\n\nBy default this is 1. TextArea defaults to 4.\nMax lines represents the number of lines the value field will display.\n\n\n\n\nUnsupported Fields\n\n\n\n\nPassword\n\n\nNumber\n\n\nText (Use TextArea instead)\n\n\n\n\n\n\ntextArea\n \n{\n\n    \nmaxLines\n \n=\n \n3\n\n\n}\n\n\n\n\n\n\nRight To Left (RTL)\n\u00b6\n\n\nBy default this is true.\nThis determines the gravity of the text in the value field.\n\n\ntext\n \n{\n\n    \nrightToLeft\n \n=\n \nfalse\n\n\n}\n\n\n\n\n\n\nError\n\u00b6\n\n\nThis is the error text displayed in red below the form element.\n\n\ntext\n \n{\n\n    \nerror\n \n=\n \n\"That's an error\"\n\n\n}\n\n\n\n\n\n\nRequired\n\u00b6\n\n\nBy default this is false.\nSetting required to true will cause FormBuildHelper.isValidForm to return false if a value is not set.\n\n\ntext\n \n{\n\n    \nrequired\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\nVisible\n\u00b6\n\n\nBy default this is true.\nSetting visible to false will hide the form element.\n\n\ntext\n \n{\n\n    \nvisible\n \n=\n \nfalse\n\n\n}\n\n\n\n\n\n\nEnabled\n\u00b6\n\n\nBy default this is true.\nSetting enabled to false will disable the form element. This means that the click event will not fire when tapped, the text will be grayed out, and the value cannot be edited.\n\n\n\n\nText View\n\n\nUse the TextView element if you just want a simple uneditable text element.\n\n\n\n\ntext\n \n{\n\n    \nenabled\n \n=\n \nfalse\n\n\n}\n\n\n\n\n\n\nClear value\n\u00b6\n\n\nClear the value of the element.\n\n\nelement\n.\nclear\n()\n\n\n\n\n\n\nIs the value valid?\n\u00b6\n\n\nisValid contains a getter that checks if the valid is valid. At the base level, this checks if the value is not null or empty.\nThis is used by formBuilder.isValidForm.\n\n\nelement\n.\nisValid\n\n\n\n\n\n\nDynamic Views\n\u00b6\n\n\n\n\nNOTICE\n\n\nThe Item View, Title View, Edit View, and Error View are accessible from the model to support changing variables such as the title, value, visibility, and error. However, try not to use the views directly. Let the variable setters do the work for you. Also, the views cannot be modified during the creation of the form elements as they are initialized during the render of the RecylerView.",
            "title": "Base"
        },
        {
            "location": "/element/base/#tag",
            "text": "The tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list.  text ( 1 )   {  }  email ( Tag . Email . ordinal )   {  }   val   textElement   =   formBuilder . getElementAtIndex ( 0 )   as   FormSingleLineEditTextElement  val   emailElement   =   formBuilder . getFormElement < FormEmailEditTextElement >( Tag . Email . ordinal )",
            "title": "Tag"
        },
        {
            "location": "/element/base/#title",
            "text": "The title is the text displayed next to the value of the form element.  text   { \n     title   =   getString ( R . string . title )  }",
            "title": "Title"
        },
        {
            "location": "/element/base/#value",
            "text": "The value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice.  text   { \n     value   =   \"Hello World\"  }  autoComplete < ContactItem >   { \n     value   =   ContactItem ( id   =   1 ,   value   =   \"John Smith\" )  }",
            "title": "Value"
        },
        {
            "location": "/element/base/#value-observers",
            "text": "The list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element.  text   { \n     value   =   \"Hello World\" \n     valueObservers . add ({   newValue ,   element   -> \n         Toast . makeText ( this @FormActivity ,   newValue ,   LENGTH_SHORT ). show () \n     })  }",
            "title": "Value Observers"
        },
        {
            "location": "/element/base/#options",
            "text": "The list of options is used in form elements such as the Form Picker Dropdown Element and Form Picker MultiCheckBox Element.   private   val   fruits   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ), \n     ListItem ( id   =   2 ,   name   =   \"Orange\" ), \n     ListItem ( id   =   3 ,   name   =   \"Mango\" ), \n     ListItem ( id   =   4 ,   name   =   \"Guava\" ), \n     ListItem ( id   =   5 ,   name   =   \"Apple\" )  )  dropDown < ListItem >   { \n     options   =   fruits \n     value   =   ListItem ( id   =   1 ,   name   =   \"Banana\" )  }  multiCheckBox < List < ListItem >>   { \n     options   =   fruits \n     value   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ))  }",
            "title": "Options"
        },
        {
            "location": "/element/base/#updating-options-later",
            "text": "After changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.  element . options   =   listOf ()  element . reInitDialog ( this   /* context */ ,   formBuilder )",
            "title": "Updating options later"
        },
        {
            "location": "/element/base/#hint",
            "text": "The hint is the hint (or placeholder) of the value field.  text   { \n     hint   =   \"Enter a name\"  }",
            "title": "Hint"
        },
        {
            "location": "/element/base/#max-lines",
            "text": "By default this is 1. TextArea defaults to 4.\nMax lines represents the number of lines the value field will display.   Unsupported Fields   Password  Number  Text (Use TextArea instead)    textArea   { \n     maxLines   =   3  }",
            "title": "Max Lines"
        },
        {
            "location": "/element/base/#right-to-left-rtl",
            "text": "By default this is true.\nThis determines the gravity of the text in the value field.  text   { \n     rightToLeft   =   false  }",
            "title": "Right To Left (RTL)"
        },
        {
            "location": "/element/base/#error",
            "text": "This is the error text displayed in red below the form element.  text   { \n     error   =   \"That's an error\"  }",
            "title": "Error"
        },
        {
            "location": "/element/base/#required",
            "text": "By default this is false.\nSetting required to true will cause FormBuildHelper.isValidForm to return false if a value is not set.  text   { \n     required   =   true  }",
            "title": "Required"
        },
        {
            "location": "/element/base/#visible",
            "text": "By default this is true.\nSetting visible to false will hide the form element.  text   { \n     visible   =   false  }",
            "title": "Visible"
        },
        {
            "location": "/element/base/#enabled",
            "text": "By default this is true.\nSetting enabled to false will disable the form element. This means that the click event will not fire when tapped, the text will be grayed out, and the value cannot be edited.   Text View  Use the TextView element if you just want a simple uneditable text element.   text   { \n     enabled   =   false  }",
            "title": "Enabled"
        },
        {
            "location": "/element/base/#clear-value",
            "text": "Clear the value of the element.  element . clear ()",
            "title": "Clear value"
        },
        {
            "location": "/element/base/#is-the-value-valid",
            "text": "isValid contains a getter that checks if the valid is valid. At the base level, this checks if the value is not null or empty.\nThis is used by formBuilder.isValidForm.  element . isValid",
            "title": "Is the value valid?"
        },
        {
            "location": "/element/base/#dynamic-views",
            "text": "NOTICE  The Item View, Title View, Edit View, and Error View are accessible from the model to support changing variables such as the title, value, visibility, and error. However, try not to use the views directly. Let the variable setters do the work for you. Also, the views cannot be modified during the creation of the form elements as they are initialized during the render of the RecylerView.",
            "title": "Dynamic Views"
        },
        {
            "location": "/element/header/",
            "text": "The Header element is used as a header row.\n\n\n\n\nCollapsible\n\u00b6\n\n\nBy default this is false.\nSetting this to true will allow the form header to \"collapse/uncollapse\" (Hide/Show) elements below it when tapped.\n\n\nheader\n \n{\n \ncollapsible\n \n=\n \ntrue\n \n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nheader\n \n{\n \ntitle\n \n=\n \n\"I'm a header row\"\n;\n \ncollapsible\n \n=\n \ntrue\n \n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nHeaderBuilder\n \nheader\n \n=\n \nnew\n \nHeaderBuilder\n(\n\"I'm a header row\"\n);\n\n\nelements\n.\nadd\n(\nheader\n.\nbuild\n());",
            "title": "Header"
        },
        {
            "location": "/element/header/#collapsible",
            "text": "By default this is false.\nSetting this to true will allow the form header to \"collapse/uncollapse\" (Hide/Show) elements below it when tapped.  header   {   collapsible   =   true   }",
            "title": "Collapsible"
        },
        {
            "location": "/element/header/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/header/#kotlin",
            "text": "header   {   title   =   \"I'm a header row\" ;   collapsible   =   true   }",
            "title": "Kotlin"
        },
        {
            "location": "/element/header/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  HeaderBuilder   header   =   new   HeaderBuilder ( \"I'm a header row\" );  elements . add ( header . build ());",
            "title": "Java"
        },
        {
            "location": "/element/singleLine/",
            "text": "The Single Line form element is used for a single line value field.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ntext\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"Example\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nSingleLineEditTextBuilder\n \ntext\n \n=\n \nnew\n \nSingleLineEditTextBuilder\n(\n1\n);\n\n\ntext\n.\nsetValue\n(\n\"Example\"\n);\n\n\nelements\n.\nadd\n(\ntext\n.\nbuild\n());",
            "title": "Single Line"
        },
        {
            "location": "/element/singleLine/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/singleLine/#kotlin",
            "text": "text ( 1 )   { \n     value   =   \"Example\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/singleLine/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  SingleLineEditTextBuilder   text   =   new   SingleLineEditTextBuilder ( 1 );  text . setValue ( \"Example\" );  elements . add ( text . build ());",
            "title": "Java"
        },
        {
            "location": "/element/multiLine/",
            "text": "The Multi Line form element is used for a multi line value field.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ntextArea\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"Example\"\n\n    \nmaxLines\n \n=\n \n3\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nMultiLineEditTextBuilder\n \ntextArea\n \n=\n \nnew\n \nMultiLineEditTextBuilder\n(\n1\n);\n\n\ntextArea\n.\nsetValue\n(\n\"Example\"\n);\n\n\ntextArea\n.\nsetMaxLines\n(\n3\n);\n\n\nelements\n.\nadd\n(\ntextArea\n.\nbuild\n());",
            "title": "Multi Line"
        },
        {
            "location": "/element/multiLine/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/multiLine/#kotlin",
            "text": "textArea ( 1 )   { \n     value   =   \"Example\" \n     maxLines   =   3  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/multiLine/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  MultiLineEditTextBuilder   textArea   =   new   MultiLineEditTextBuilder ( 1 );  textArea . setValue ( \"Example\" );  textArea . setMaxLines ( 3 );  elements . add ( textArea . build ());",
            "title": "Java"
        },
        {
            "location": "/element/email/",
            "text": "The Email form element is used for an email address value field with the email keyboard layout.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nemail\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"example@example.com\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nEmailEditTextBuilder\n \nemail\n \n=\n \nnew\n \nEmailEditTextBuilder\n(\n1\n);\n\n\nemail\n.\nsetValue\n(\n\"example@example.com\"\n);\n\n\nelements\n.\nadd\n(\nemail\n.\nbuild\n());",
            "title": "Email"
        },
        {
            "location": "/element/email/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/email/#kotlin",
            "text": "email ( 1 )   { \n     value   =   \"example@example.com\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/email/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  EmailEditTextBuilder   email   =   new   EmailEditTextBuilder ( 1 );  email . setValue ( \"example@example.com\" );  elements . add ( email . build ());",
            "title": "Java"
        },
        {
            "location": "/element/password/",
            "text": "The Password form element is used for a password value field. This field is masked.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\npassword\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"hunter2\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nPasswordEditTextBuilder\n \npassword\n \n=\n \nnew\n \nPasswordEditTextBuilder\n(\n1\n);\n\n\npassword\n.\nsetValue\n(\n\"hunter2\"\n);\n\n\nelements\n.\nadd\n(\npassword\n.\nbuild\n());",
            "title": "Password"
        },
        {
            "location": "/element/password/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/password/#kotlin",
            "text": "password ( 1 )   { \n     value   =   \"hunter2\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/password/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  PasswordEditTextBuilder   password   =   new   PasswordEditTextBuilder ( 1 );  password . setValue ( \"hunter2\" );  elements . add ( password . build ());",
            "title": "Java"
        },
        {
            "location": "/element/number/",
            "text": "The Number element is used for a number value field with the number keyboard layout.\n\n\n\n\n\n\nNOTICE\n\n\nThe value is a String. It is up to you to convert the resulting value to a number if necessary.\n\n\n\n\nval\n \nnum\n:\n \nInt\n \n=\n \nnewValue\n?.\ntoInt\n()\n?:\n \n0\n\n\n\n\n\n\nNumbers Only\n\u00b6\n\n\nBy default this is false.\nSetting this to true will only allow numbers to be entered in the value field.\n\n\nnumber\n \n{\n\n    \nnumbersOnly\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nnumber\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n1234\n\n    \nnumbersOnly\n \n=\n \ntrue\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nNumberEditTextBuilder\n \nnumber\n \n=\n \nnew\n \nNumberEditTextBuilder\n(\n1\n);\n\n\nnumber\n.\nsetValue\n(\n1234\n);\n\n\nnumber\n.\nsetNumbersOnly\n(\ntrue\n);\n\n\nelements\n.\nadd\n(\nnumber\n.\nbuild\n());",
            "title": "Number"
        },
        {
            "location": "/element/number/#numbers-only",
            "text": "By default this is false.\nSetting this to true will only allow numbers to be entered in the value field.  number   { \n     numbersOnly   =   true  }",
            "title": "Numbers Only"
        },
        {
            "location": "/element/number/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/number/#kotlin",
            "text": "number ( 1 )   { \n     value   =   1234 \n     numbersOnly   =   true  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/number/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  NumberEditTextBuilder   number   =   new   NumberEditTextBuilder ( 1 );  number . setValue ( 1234 );  number . setNumbersOnly ( true );  elements . add ( number . build ());",
            "title": "Java"
        },
        {
            "location": "/element/phone/",
            "text": "The Phone form element is used for a phone number value field with the phone keyboard layout.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nphone\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"(555) 555-5555\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nPhoneEditTextBuilder\n \nphone\n \n=\n \nnew\n \nPhoneEditTextBuilder\n(\n1\n);\n\n\nphone\n.\nsetValue\n(\n\"(555) 555-5555\"\n);\n\n\nelements\n.\nadd\n(\nphone\n.\nbuild\n());",
            "title": "Phone"
        },
        {
            "location": "/element/phone/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/phone/#kotlin",
            "text": "phone ( 1 )   { \n     value   =   \"(555) 555-5555\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/phone/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  PhoneEditTextBuilder   phone   =   new   PhoneEditTextBuilder ( 1 );  phone . setValue ( \"(555) 555-5555\" );  elements . add ( phone . build ());",
            "title": "Java"
        },
        {
            "location": "/element/textView/",
            "text": "The Text View form element is used for a readonly text value field.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ntextView\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"Example\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nTextViewBuilder\n \ntextView\n \n=\n \nnew\n \nTextViewBuilder\n(\n1\n);\n\n\ntextView\n.\nsetValue\n(\n\"Example\"\n);\n\n\nelements\n.\nadd\n(\ntextView\n.\nbuild\n());",
            "title": "Text View"
        },
        {
            "location": "/element/textView/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/textView/#kotlin",
            "text": "textView ( 1 )   { \n     value   =   \"Example\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/textView/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  TextViewBuilder   textView   =   new   TextViewBuilder ( 1 );  textView . setValue ( \"Example\" );  elements . add ( textView . build ());",
            "title": "Java"
        },
        {
            "location": "/element/date/",
            "text": "The Date form element is used for a date dialog.\n\n\n\n\n\n\n\n\nValue\n\n\n\n\nYou can set value directly by creating a new instance of FormPickerDateElement.DateHolder. However, dateValue and dateFormat will create the instance for you.\n\n\nCall getTime() on value to get a Date object back.\n\n\n\n\n\n\nDate Value\n\u00b6\n\n\nA java.util.Date value.\n\n\nDate Format\n\u00b6\n\n\nA java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ndate\n(\n1\n)\n \n{\n\n    \ndateValue\n \n=\n \nDate\n()\n\n    \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy\"\n,\n \nLocale\n.\nUS\n)\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nDateBuilder\n \ndate\n \n=\n \nnew\n \nDateBuilder\n(\n1\n);\n\n\ndate\n.\nsetDateValue\n(\nnew\n \nDate\n());\n\n\ndate\n.\nsetDateFormat\n(\nnew\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy\"\n,\n \nLocale\n.\nUS\n));\n\n\nelements\n.\nadd\n(\ndate\n.\nbuild\n());",
            "title": "Date"
        },
        {
            "location": "/element/date/#date-value",
            "text": "A java.util.Date value.",
            "title": "Date Value"
        },
        {
            "location": "/element/date/#date-format",
            "text": "A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.",
            "title": "Date Format"
        },
        {
            "location": "/element/date/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/date/#kotlin",
            "text": "date ( 1 )   { \n     dateValue   =   Date () \n     dateFormat   =   SimpleDateFormat ( \"MM/dd/yyyy\" ,   Locale . US )  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/date/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  DateBuilder   date   =   new   DateBuilder ( 1 );  date . setDateValue ( new   Date ());  date . setDateFormat ( new   SimpleDateFormat ( \"MM/dd/yyyy\" ,   Locale . US ));  elements . add ( date . build ());",
            "title": "Java"
        },
        {
            "location": "/element/time/",
            "text": "The Time form element is used for a time dialog.\n\n\n\n\n\n\n\n\nValue\n\n\n\n\nYou can set value directly by creating a new instance of FormPickerTimeElement.TimeHolder. However, dateValue and dateFormat will create the instance for you.\n\n\nCall getTime() on value to get a Date object back.\n\n\n\n\n\n\nDate Value\n\u00b6\n\n\nA java.util.Date value.\n\n\nDate Format\n\u00b6\n\n\nA java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ntime\n(\n1\n)\n \n{\n\n    \ndateValue\n \n=\n \nDate\n()\n\n    \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"hh:mm a\"\n,\n \nLocale\n.\nUS\n)\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nTimeBuilder\n \ntime\n \n=\n \nnew\n \nTimeBuilder\n(\n1\n);\n\n\ntime\n.\nsetDateValue\n(\nnew\n \nDate\n());\n\n\ntime\n.\nsetDateFormat\n(\nnew\n \nSimpleDateFormat\n(\n\"hh:mm a\"\n,\n \nLocale\n.\nUS\n));\n\n\nelements\n.\nadd\n(\ntime\n.\nbuild\n());",
            "title": "Time"
        },
        {
            "location": "/element/time/#date-value",
            "text": "A java.util.Date value.",
            "title": "Date Value"
        },
        {
            "location": "/element/time/#date-format",
            "text": "A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.",
            "title": "Date Format"
        },
        {
            "location": "/element/time/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/time/#kotlin",
            "text": "time ( 1 )   { \n     dateValue   =   Date () \n     dateFormat   =   SimpleDateFormat ( \"hh:mm a\" ,   Locale . US )  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/time/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  TimeBuilder   time   =   new   TimeBuilder ( 1 );  time . setDateValue ( new   Date ());  time . setDateFormat ( new   SimpleDateFormat ( \"hh:mm a\" ,   Locale . US ));  elements . add ( time . build ());",
            "title": "Java"
        },
        {
            "location": "/element/dateTime/",
            "text": "The DateTime form element is used for a date and then time dialog. The date dialog is displayed first and then the time dialog is displayed.\n\n\n\n\n\n\n\n\n\n\nValue\n\n\n\n\nYou can set value directly by creating a new instance of FormPickerDateTimeElement.DateTimeHolder. However, dateValue and dateFormat will create the instance for you.\n\n\nCall getTime() on value to get a Date object back.\n\n\n\n\n\n\nDate Value\n\u00b6\n\n\nA java.util.Date value.\n\n\nDate Format\n\u00b6\n\n\nA java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ndateTime\n(\n1\n)\n \n{\n\n    \ndateValue\n \n=\n \nDate\n()\n\n    \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy hh:mm a\"\n,\n \nLocale\n.\nUS\n)\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nDateTimeBuilder\n \ndateTime\n \n=\n \nnew\n \nDateTimeBuilder\n(\n1\n);\n\n\ndateTime\n.\nsetDateValue\n(\nnew\n \nDate\n());\n\n\ndateTime\n.\nsetDateFormat\n(\nnew\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy hh:mm a\"\n,\n \nLocale\n.\nUS\n));\n\n\nelements\n.\nadd\n(\ndateTime\n.\nbuild\n());",
            "title": "DateTime"
        },
        {
            "location": "/element/dateTime/#date-value",
            "text": "A java.util.Date value.",
            "title": "Date Value"
        },
        {
            "location": "/element/dateTime/#date-format",
            "text": "A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.",
            "title": "Date Format"
        },
        {
            "location": "/element/dateTime/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/dateTime/#kotlin",
            "text": "dateTime ( 1 )   { \n     dateValue   =   Date () \n     dateFormat   =   SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" ,   Locale . US )  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/dateTime/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  DateTimeBuilder   dateTime   =   new   DateTimeBuilder ( 1 );  dateTime . setDateValue ( new   Date ());  dateTime . setDateFormat ( new   SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" ,   Locale . US ));  elements . add ( dateTime . build ());",
            "title": "Java"
        },
        {
            "location": "/element/dropdown/",
            "text": "The DropDown form element is used for a single choice dialog.\n\n\n\n\n\n\nArray Adapter\n\u00b6\n\n\nSet your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.\n\n\n\n\nNOTICE\n\n\nThe ListItem, ContactItem, and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dialog.\n\n\n\n\ndropDown\n<\nContactItem\n>(\n1\n)\n \n{\n\n    \narrayAdapter\n \n=\n \nContactAutoCompleteAdapter\n(\nthis\n@FormActivity\n,\n\n                        \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n)\n\n\n}\n\n\n\n\n\n\nDialog Title\n\u00b6\n\n\nBy default this is \"Select One\".\nSetting this will override the alert dialog title.\n\n\ndropDown\n<\nListItem\n>(\n1\n)\n \n{\n\n    \ndialogTitle\n \n=\n \n\"Select One\"\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ndropDown\n<\nListItem\n>(\n1\n)\n \n{\n\n    \ndialogTitle\n \n=\n \n\"Select One\"\n\n    \noptions\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n),\n \n                     \nListItem\n(\nid\n \n=\n \n2\n,\n \nname\n \n=\n \n\"Orange\"\n))\n\n    \nvalue\n \n=\n \nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n)\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nDropDownBuilder\n<\nListItem\n>\n \ndropDown\n \n=\n \nnew\n \nDropDownBuilder\n<>(\n1\n);\n\n\ndropDown\n.\nsetDialogTitle\n(\n\"Select One\"\n);\n\n\ndropDown\n.\nsetOptions\n(\nArrays\n.\nasList\n(\nnew\n \nListItem\n(\n1L\n,\n \n\"Banana\"\n),\n\n    \nnew\n \nListItem\n(\n2L\n,\n \n\"Orange\"\n)));\n\n\ndropDown\n.\nsetValue\n(\nnew\n \nListItem\n(\n1L\n,\n \n\"Banana\"\n));\n\n\nelements\n.\nadd\n(\ndropDown\n.\nbuild\n());",
            "title": "Dropdown"
        },
        {
            "location": "/element/dropdown/#array-adapter",
            "text": "Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.   NOTICE  The ListItem, ContactItem, and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dialog.   dropDown < ContactItem >( 1 )   { \n     arrayAdapter   =   ContactAutoCompleteAdapter ( this @FormActivity , \n                         android . R . layout . simple_list_item_1 )  }",
            "title": "Array Adapter"
        },
        {
            "location": "/element/dropdown/#dialog-title",
            "text": "By default this is \"Select One\".\nSetting this will override the alert dialog title.  dropDown < ListItem >( 1 )   { \n     dialogTitle   =   \"Select One\"  }",
            "title": "Dialog Title"
        },
        {
            "location": "/element/dropdown/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/dropdown/#kotlin",
            "text": "dropDown < ListItem >( 1 )   { \n     dialogTitle   =   \"Select One\" \n     options   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ),  \n                      ListItem ( id   =   2 ,   name   =   \"Orange\" )) \n     value   =   ListItem ( id   =   1 ,   name   =   \"Banana\" )  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/dropdown/#java",
            "text": "DropDownBuilder < ListItem >   dropDown   =   new   DropDownBuilder <>( 1 );  dropDown . setDialogTitle ( \"Select One\" );  dropDown . setOptions ( Arrays . asList ( new   ListItem ( 1L ,   \"Banana\" ), \n     new   ListItem ( 2L ,   \"Orange\" )));  dropDown . setValue ( new   ListItem ( 1L ,   \"Banana\" ));  elements . add ( dropDown . build ());",
            "title": "Java"
        },
        {
            "location": "/element/multiCheckBox/",
            "text": "The MultiCheckBox form element is used for a multiple choice dialog.\n\n\n\n\n\n\n\n\nNOTICE\n\n\nThe ListItem class is provided in the example app. Your custom class just needs to override toString() to display in the dialog.\n\n\n\n\nDialog Title\n\u00b6\n\n\nBy default this is \"Pick one or more\".\nSetting this will override the alert dialog title.\n\n\nmultiCheckBox\n<\nList\n<\nListItem\n>>(\n1\n)\n \n{\n\n    \ndialogTitle\n \n=\n \n\"Pick one or more\"\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nmultiCheckBox\n<\nList\n<\nListItem\n>>(\n1\n)\n \n{\n\n    \ndialogTitle\n \n=\n \n\"Pick one or more\"\n\n    \noptions\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n),\n \n                     \nListItem\n(\nid\n \n=\n \n2\n,\n \nname\n \n=\n \n\"Orange\"\n))\n\n    \nvalue\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n))\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nMultiCheckBoxBuilder\n<\nList\n<\nListItem\n>>\n \nmultiCheckBox\n \n=\n \nnew\n \nMultiCheckBoxBuilder\n<>(\nTag\n.\nMultiItems\n.\nordinal\n());\n\n\nmultiCheckBox\n.\nsetDialogTitle\n(\n\"Pick one or more\"\n);\n\n\nmultiCheckBox\n.\nsetOptions\n(\nArrays\n.\nasList\n(\nnew\n \nListItem\n(\n1L\n,\n \n\"Banana\"\n),\n\n    \nnew\n \nListItem\n(\n2L\n,\n \n\"Orange\"\n)));\n\n\nmultiCheckBox\n.\nsetValue\n(\nCollections\n.\nsingletonList\n(\nnew\n \nListItem\n(\n1L\n,\n \n\"Banana\"\n)));\n\n\nelements\n.\nadd\n(\nmultiCheckBox\n.\nbuild\n());",
            "title": "MultiCheckBox"
        },
        {
            "location": "/element/multiCheckBox/#dialog-title",
            "text": "By default this is \"Pick one or more\".\nSetting this will override the alert dialog title.  multiCheckBox < List < ListItem >>( 1 )   { \n     dialogTitle   =   \"Pick one or more\"  }",
            "title": "Dialog Title"
        },
        {
            "location": "/element/multiCheckBox/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/multiCheckBox/#kotlin",
            "text": "multiCheckBox < List < ListItem >>( 1 )   { \n     dialogTitle   =   \"Pick one or more\" \n     options   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ),  \n                      ListItem ( id   =   2 ,   name   =   \"Orange\" )) \n     value   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ))  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/multiCheckBox/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  MultiCheckBoxBuilder < List < ListItem >>   multiCheckBox   =   new   MultiCheckBoxBuilder <>( Tag . MultiItems . ordinal ());  multiCheckBox . setDialogTitle ( \"Pick one or more\" );  multiCheckBox . setOptions ( Arrays . asList ( new   ListItem ( 1L ,   \"Banana\" ), \n     new   ListItem ( 2L ,   \"Orange\" )));  multiCheckBox . setValue ( Collections . singletonList ( new   ListItem ( 1L ,   \"Banana\" )));  elements . add ( multiCheckBox . build ());",
            "title": "Java"
        },
        {
            "location": "/element/autoComplete/",
            "text": "The AutoComplete form element is used for an AutoComplete row.\n\n\n\n\n\n\nArray Adapter\n\u00b6\n\n\nSet your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.\n\n\n\n\nNOTICE\n\n\nThe ContactItem and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown.\n\n\n\n\nautoComplete\n<\nContactItem\n>(\n1\n)\n \n{\n\n    \narrayAdapter\n \n=\n \nContactAutoCompleteAdapter\n(\nthis\n@FormActivity\n,\n\n                        \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n)\n\n\n}\n\n\n\n\n\n\nDropdown Width\n\u00b6\n\n\nThis is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width.\n\n\nautoComplete\n<\nContactItem\n>(\n1\n)\n \n{\n\n    \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nautoComplete\n<\nContactItem\n>(\n1\n)\n \n{\n\n    \narrayAdapter\n \n=\n \nContactAutoCompleteAdapter\n(\nthis\n@FormActivity\n,\n\n                        \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n,\n \ndefaultItems\n \n=\n\n                            \narrayListOf\n(\nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"\"\n,\n \nlabel\n \n=\n \n\"Try \\\"Apple May\\\"\"\n)))\n\n    \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n    \nvalue\n \n=\n \nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"John Smith\"\n,\n \nlabel\n \n=\n \n\"John Smith (Tester)\"\n)\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nAutoCompleteBuilder\n<\nContactItem\n>\n \nautoComplete\n \n=\n \nnew\n \nAutoCompleteBuilder\n<>(\n1\n);\n\n\nautoComplete\n.\nsetArrayAdapter\n(\nnew\n \nContactAutoCompleteAdapter\n(\nthis\n,\n\n    \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n,\n\n    \nnew\n \nArrayList\n<>(\nCollections\n.\nsingletonList\n(\nnew\n \nContactItem\n(\n1L\n,\n \n\"\"\n,\n \n\"Try \\\"Apple May\\\"\"\n)))));\n\n\nautoComplete\n.\nsetDropdownWidth\n(\nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n);\n\n\nautoComplete\n.\nsetValue\n(\nnew\n \nContactItem\n(\n1L\n,\n \n\"John Smith\"\n,\n \n\"John Smith (Tester)\"\n));\n\n\nelements\n.\nadd\n(\nautoComplete\n.\nbuild\n());",
            "title": "AutoComplete"
        },
        {
            "location": "/element/autoComplete/#array-adapter",
            "text": "Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.   NOTICE  The ContactItem and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown.   autoComplete < ContactItem >( 1 )   { \n     arrayAdapter   =   ContactAutoCompleteAdapter ( this @FormActivity , \n                         android . R . layout . simple_list_item_1 )  }",
            "title": "Array Adapter"
        },
        {
            "location": "/element/autoComplete/#dropdown-width",
            "text": "This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width.  autoComplete < ContactItem >( 1 )   { \n     dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT  }",
            "title": "Dropdown Width"
        },
        {
            "location": "/element/autoComplete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/autoComplete/#kotlin",
            "text": "autoComplete < ContactItem >( 1 )   { \n     arrayAdapter   =   ContactAutoCompleteAdapter ( this @FormActivity , \n                         android . R . layout . simple_list_item_1 ,   defaultItems   = \n                             arrayListOf ( ContactItem ( id   =   1 ,   value   =   \"\" ,   label   =   \"Try \\\"Apple May\\\"\" ))) \n     dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT \n     value   =   ContactItem ( id   =   1 ,   value   =   \"John Smith\" ,   label   =   \"John Smith (Tester)\" )  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/autoComplete/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  AutoCompleteBuilder < ContactItem >   autoComplete   =   new   AutoCompleteBuilder <>( 1 );  autoComplete . setArrayAdapter ( new   ContactAutoCompleteAdapter ( this , \n     android . R . layout . simple_list_item_1 , \n     new   ArrayList <>( Collections . singletonList ( new   ContactItem ( 1L ,   \"\" ,   \"Try \\\"Apple May\\\"\" )))));  autoComplete . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT );  autoComplete . setValue ( new   ContactItem ( 1L ,   \"John Smith\" ,   \"John Smith (Tester)\" ));  elements . add ( autoComplete . build ());",
            "title": "Java"
        },
        {
            "location": "/element/autoCompleteToken/",
            "text": "The AutoCompleteToken form element is used for an AutoComplete row with multiple values represented as tokens.\n\n\n\n\n\n\nArray Adapter\n\u00b6\n\n\nSet your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.\n\n\n\n\nNOTICE\n\n\nThe ContactItem and EmailAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown.\n\n\n\n\nautoCompleteToken\n<\nList\n<\nContactItem\n>>(\n1\n)\n \n{\n\n    \narrayAdapter\n \n=\n \nEmailAutoCompleteAdapter\n(\nthis\n@FormActivity\n,\n\n                        \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n)\n\n\n}\n\n\n\n\n\n\nDropdown Width\n\u00b6\n\n\nThis is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width.\n\n\nautoCompleteToken\n<\nList\n<\nContactItem\n>>(\n1\n)\n \n{\n\n    \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nautoCompleteToken\n<\nList\n<\nContactItem\n>>(\n1\n)\n \n{\n\n    \narrayAdapter\n \n=\n \nEmailAutoCompleteAdapter\n(\nthis\n@FormActivity\n,\n\n                        \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n)\n\n    \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n    \nvalue\n \n=\n \narrayListOf\n(\nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"John.Smith@mail.com\"\n,\n \nlabel\n \n=\n \n\"John Smith (Tester)\"\n))\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nAutoCompleteTokenBuilder\n<\nList\n<\nContactItem\n>>\n \nautoCompleteToken\n \n=\n \nnew\n \nAutoCompleteTokenBuilder\n<>(\n1\n);\n\n\nautoCompleteToken\n.\nsetArrayAdapter\n(\nnew\n \nEmailAutoCompleteAdapter\n(\nthis\n,\n\n    \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n));\n\n\nautoCompleteToken\n.\nsetDropdownWidth\n(\nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n);\n\n\nelements\n.\nadd\n(\nautoCompleteToken\n.\nbuild\n());",
            "title": "AutoCompleteToken"
        },
        {
            "location": "/element/autoCompleteToken/#array-adapter",
            "text": "Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call.   NOTICE  The ContactItem and EmailAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown.   autoCompleteToken < List < ContactItem >>( 1 )   { \n     arrayAdapter   =   EmailAutoCompleteAdapter ( this @FormActivity , \n                         android . R . layout . simple_list_item_1 )  }",
            "title": "Array Adapter"
        },
        {
            "location": "/element/autoCompleteToken/#dropdown-width",
            "text": "This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width.  autoCompleteToken < List < ContactItem >>( 1 )   { \n     dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT  }",
            "title": "Dropdown Width"
        },
        {
            "location": "/element/autoCompleteToken/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/autoCompleteToken/#kotlin",
            "text": "autoCompleteToken < List < ContactItem >>( 1 )   { \n     arrayAdapter   =   EmailAutoCompleteAdapter ( this @FormActivity , \n                         android . R . layout . simple_list_item_1 ) \n     dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT \n     value   =   arrayListOf ( ContactItem ( id   =   1 ,   value   =   \"John.Smith@mail.com\" ,   label   =   \"John Smith (Tester)\" ))  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/autoCompleteToken/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  AutoCompleteTokenBuilder < List < ContactItem >>   autoCompleteToken   =   new   AutoCompleteTokenBuilder <>( 1 );  autoCompleteToken . setArrayAdapter ( new   EmailAutoCompleteAdapter ( this , \n     android . R . layout . simple_list_item_1 ));  autoCompleteToken . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT );  elements . add ( autoCompleteToken . build ());",
            "title": "Java"
        },
        {
            "location": "/element/switch/",
            "text": "The Switch form element is used for a toggle switch row.\n\n\n\n\nOn and Off Values\n\u00b6\n\n\nThe value is set to onValue when checked. The value is set to offValue when unChecked. \n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nswitch\n<\nString\n>(\n1\n)\n \n{\n\n   \nvalue\n \n=\n \n\"Yes\"\n\n   \nonValue\n \n=\n \n\"Yes\"\n\n   \noffValue\n \n=\n \n\"No\"\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nSwitchBuilder\n<\nString\n>\n \nswitchElement\n \n=\n \nnew\n \nSwitchBuilder\n<>(\n1\n);\n\n\nswitchElement\n.\nsetValue\n(\n\"Yes\"\n);\n\n\nswitchElement\n.\nsetOnValue\n(\n\"Yes\"\n);\n\n\nswitchElement\n.\nsetOffValue\n(\n\"No\"\n);\n\n\nelements\n.\nadd\n(\nswitchElement\n.\nbuild\n());",
            "title": "Switch"
        },
        {
            "location": "/element/switch/#on-and-off-values",
            "text": "The value is set to onValue when checked. The value is set to offValue when unChecked.",
            "title": "On and Off Values"
        },
        {
            "location": "/element/switch/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/switch/#kotlin",
            "text": "switch < String >( 1 )   { \n    value   =   \"Yes\" \n    onValue   =   \"Yes\" \n    offValue   =   \"No\"  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/switch/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  SwitchBuilder < String >   switchElement   =   new   SwitchBuilder <>( 1 );  switchElement . setValue ( \"Yes\" );  switchElement . setOnValue ( \"Yes\" );  switchElement . setOffValue ( \"No\" );  elements . add ( switchElement . build ());",
            "title": "Java"
        },
        {
            "location": "/element/slider/",
            "text": "The Slider form element is used for a slider (SeekBar) row.\n\n\n\n\nMin\n\u00b6\n\n\nMin is the minimum number for the slider.\n\n\nMax\n\u00b6\n\n\nMax is the maximum number for the slider.\n\n\nSteps\n\u00b6\n\n\nSteps are the number of places in the slider. In the example, the slider will step from 0, 5, 10, 15...100. \n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nslider\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n50\n\n    \nmin\n \n=\n \n0\n\n    \nmax\n \n=\n \n100\n\n    \nsteps\n \n=\n \n20\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nSliderBuilder\n \nslider\n \n=\n \nnew\n \nSliderBuilder\n(\n1\n);\n\n\nslider\n.\nsetValue\n(\n50\n);\n\n\nslider\n.\nsetMin\n(\n0\n);\n\n\nslider\n.\nsetMax\n(\n100\n);\n\n\nslider\n.\nsetSteps\n(\n20\n);\n\n\nelements\n.\nadd\n(\nslider\n.\nbuild\n());",
            "title": "Slider"
        },
        {
            "location": "/element/slider/#min",
            "text": "Min is the minimum number for the slider.",
            "title": "Min"
        },
        {
            "location": "/element/slider/#max",
            "text": "Max is the maximum number for the slider.",
            "title": "Max"
        },
        {
            "location": "/element/slider/#steps",
            "text": "Steps are the number of places in the slider. In the example, the slider will step from 0, 5, 10, 15...100.",
            "title": "Steps"
        },
        {
            "location": "/element/slider/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/slider/#kotlin",
            "text": "slider ( 1 )   { \n     value   =   50 \n     min   =   0 \n     max   =   100 \n     steps   =   20  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/slider/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  SliderBuilder   slider   =   new   SliderBuilder ( 1 );  slider . setValue ( 50 );  slider . setMin ( 0 );  slider . setMax ( 100 );  slider . setSteps ( 20 );  elements . add ( slider . build ());",
            "title": "Java"
        },
        {
            "location": "/element/checkBox/",
            "text": "The CheckBox form element is used for a checkbox row.\n\n\n\n\nChecked and UnChecked Values\n\u00b6\n\n\nThe value is set to checkedValue when checked. The value is set to unCheckedValue when unChecked. \n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\ncheckBox\n<\nBoolean\n>(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \ntrue\n\n    \ncheckedValue\n \n=\n \ntrue\n\n    \nunCheckedValue\n \n=\n \nfalse\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nCheckBoxBuilder\n<\nBoolean\n>\n \ncheckBox\n \n=\n \nnew\n \nCheckBoxBuilder\n<>(\n1\n);\n\n\ncheckBox\n.\nsetValue\n(\ntrue\n);\n\n\ncheckBox\n.\nsetCheckedValue\n(\ntrue\n);\n\n\ncheckBox\n.\nsetUnCheckedValue\n(\nfalse\n);\n\n\nelements\n.\nadd\n(\ncheckBox\n.\nbuild\n());",
            "title": "CheckBox"
        },
        {
            "location": "/element/checkBox/#checked-and-unchecked-values",
            "text": "The value is set to checkedValue when checked. The value is set to unCheckedValue when unChecked.",
            "title": "Checked and UnChecked Values"
        },
        {
            "location": "/element/checkBox/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/checkBox/#kotlin",
            "text": "checkBox < Boolean >( 1 )   { \n     value   =   true \n     checkedValue   =   true \n     unCheckedValue   =   false  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/checkBox/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  CheckBoxBuilder < Boolean >   checkBox   =   new   CheckBoxBuilder <>( 1 );  checkBox . setValue ( true );  checkBox . setCheckedValue ( true );  checkBox . setUnCheckedValue ( false );  elements . add ( checkBox . build ());",
            "title": "Java"
        },
        {
            "location": "/element/button/",
            "text": "The Button form element is used for a button row. Click events can be caught with a valueObserver.\n\n\n\n\nExample\n\u00b6\n\n\nKotlin\n\u00b6\n\n\nbutton\n(\n1\n)\n \n{\n\n    \nvalue\n \n=\n \n\"Button Text\"\n\n    \nvalueObservers\n.\nadd\n({\n \n_\n,\n \n_\n \n->\n\n        \n// Nothing was changed but the button was tapped!\n\n    \n})\n\n\n}\n\n\n\n\n\n\nJava\n\u00b6\n\n\nList\n<\nBaseFormElement\n<?>>\n \nelements\n \n=\n \nnew\n \nArrayList\n<>();\n\n\nButtonBuilder\n \nbutton\n \n=\n \nnew\n \nButtonBuilder\n(\n1\n);\n\n\nbutton\n.\nsetValue\n(\n\"Button Text\"\n);\n\n\nbutton\n.\ngetValueObservers\n().\nadd\n((\nnewValue\n,\n \nelement\n)\n \n->\n \n{\n\n    \n// Nothing was changed but the button was tapped!\n\n    \nreturn\n \nUnit\n.\nINSTANCE\n;\n\n\n});\n\n\nelements\n.\nadd\n(\nbutton\n.\nbuild\n());",
            "title": "Button"
        },
        {
            "location": "/element/button/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/element/button/#kotlin",
            "text": "button ( 1 )   { \n     value   =   \"Button Text\" \n     valueObservers . add ({   _ ,   _   -> \n         // Nothing was changed but the button was tapped! \n     })  }",
            "title": "Kotlin"
        },
        {
            "location": "/element/button/#java",
            "text": "List < BaseFormElement <?>>   elements   =   new   ArrayList <>();  ButtonBuilder   button   =   new   ButtonBuilder ( 1 );  button . setValue ( \"Button Text\" );  button . getValueObservers (). add (( newValue ,   element )   ->   { \n     // Nothing was changed but the button was tapped! \n     return   Unit . INSTANCE ;  });  elements . add ( button . build ());",
            "title": "Java"
        },
        {
            "location": "/custom/customize/",
            "text": "Form accent color change\n\u00b6\n\n\nIf you want to change the colors, just override the colors in your \ncolors.xml\n file:\n\n\n<color\n \nname=\n\"colorFormMasterHeaderBackground\"\n>\n#DDDDDD\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterHeaderText\"\n>\n#000000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementBackground\"\n>\n#FFFFFF\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextTitle\"\n>\n#222222\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementErrorTitle\"\n>\n#FF0000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextValue\"\n>\n#000000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementButtonText\"\n>\n#42A5F5\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementFocusedTitle\"\n>\n#0277bd\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextDisabled\"\n>\n#757575\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterDivider\"\n>\n#DDDDDD\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementToken\"\n>\n#f5f5f5\n</color>\n\n\n\n\n\n\nForm UI change\n\u00b6\n\n\nIf you want to change how the forms look, just override a form_element XML in your project.\n\n\nJust make sure to keep the ID name the same as it is in the library for the components.\n\n\nandroid\n:\nid\n=\n\"@+id/formElementTitle\"\n\n\nandroid\n:\nid\n=\n\"@+id/formElementValue\"\n\n\n...",
            "title": "Customize Form"
        },
        {
            "location": "/custom/customize/#form-accent-color-change",
            "text": "If you want to change the colors, just override the colors in your  colors.xml  file:  <color   name= \"colorFormMasterHeaderBackground\" > #DDDDDD </color>  <color   name= \"colorFormMasterHeaderText\" > #000000 </color>  <color   name= \"colorFormMasterElementBackground\" > #FFFFFF </color>  <color   name= \"colorFormMasterElementTextTitle\" > #222222 </color>  <color   name= \"colorFormMasterElementErrorTitle\" > #FF0000 </color>  <color   name= \"colorFormMasterElementTextValue\" > #000000 </color>  <color   name= \"colorFormMasterElementButtonText\" > #42A5F5 </color>  <color   name= \"colorFormMasterElementFocusedTitle\" > #0277bd </color>  <color   name= \"colorFormMasterElementTextDisabled\" > #757575 </color>  <color   name= \"colorFormMasterDivider\" > #DDDDDD </color>  <color   name= \"colorFormMasterElementToken\" > #f5f5f5 </color>",
            "title": "Form accent color change"
        },
        {
            "location": "/custom/customize/#form-ui-change",
            "text": "If you want to change how the forms look, just override a form_element XML in your project.  Just make sure to keep the ID name the same as it is in the library for the components.  android : id = \"@+id/formElementTitle\"  android : id = \"@+id/formElementValue\"  ...",
            "title": "Form UI change"
        },
        {
            "location": "/custom/element/",
            "text": "It's possible to create your own form element. Here is what is needed.\n\n\nForm Element Layout\n\u00b6\n\n\nCreate a new XML layout file. We'll name it form_element_custom.xml.\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n<LinearLayout\n \nxmlns:android=\n\"http://schemas.android.com/apk/res/android\"\n\n    \nxmlns:tools=\n\"http://schemas.android.com/tools\"\n\n    \nandroid:layout_width=\n\"match_parent\"\n\n    \nandroid:layout_height=\n\"wrap_content\"\n\n    \nandroid:background=\n\"@android:color/black\"\n\n    \nandroid:orientation=\n\"vertical\"\n\n    \nandroid:paddingBottom=\n\"16dp\"\n>\n\n\n    \n<View\n\n        \nandroid:layout_width=\n\"match_parent\"\n\n        \nandroid:layout_height=\n\"0.5dp\"\n\n        \nandroid:layout_marginLeft=\n\"16dp\"\n\n        \nandroid:layout_marginRight=\n\"16dp\"\n\n        \nandroid:background=\n\"@color/colorFormMasterDivider\"\n \n/>\n\n\n    \n<LinearLayout\n\n        \nandroid:layout_width=\n\"match_parent\"\n\n        \nandroid:layout_height=\n\"wrap_content\"\n\n        \nandroid:layout_marginLeft=\n\"16dp\"\n\n        \nandroid:layout_marginRight=\n\"16dp\"\n\n        \nandroid:layout_marginTop=\n\"16dp\"\n\n        \nandroid:orientation=\n\"horizontal\"\n>\n\n\n        \n<android.support.v7.widget.AppCompatTextView\n\n            \nandroid:id=\n\"@+id/formElementTitle\"\n\n            \nandroid:layout_width=\n\"0dp\"\n\n            \nandroid:layout_height=\n\"wrap_content\"\n\n            \nandroid:layout_weight=\n\"2\"\n\n            \nandroid:textColor=\n\"@android:color/white\"\n\n            \nandroid:textSize=\n\"@dimen/elementTextTitleSize\"\n\n            \ntools:text=\n\"Test Title\"\n \n/>\n\n\n        \n<android.support.v7.widget.AppCompatEditText\n\n            \nandroid:id=\n\"@+id/formElementValue\"\n\n            \nandroid:layout_width=\n\"0dp\"\n\n            \nandroid:layout_height=\n\"wrap_content\"\n\n            \nandroid:layout_weight=\n\"3\"\n\n            \nandroid:background=\n\"@null\"\n\n            \nandroid:gravity=\n\"end\"\n\n            \nandroid:imeOptions=\n\"actionNext\"\n\n            \nandroid:inputType=\n\"textNoSuggestions\"\n\n            \nandroid:maxLines=\n\"1\"\n\n            \nandroid:textColor=\n\"@color/colorFormMasterElementFocusedTitle\"\n\n            \nandroid:textSize=\n\"20sp\"\n\n            \ntools:text=\n\"Test Value\"\n \n/>\n\n\n    \n</LinearLayout>\n\n\n    \n<android.support.v7.widget.AppCompatTextView\n\n        \nandroid:id=\n\"@+id/formElementError\"\n\n        \nandroid:layout_width=\n\"match_parent\"\n\n        \nandroid:layout_height=\n\"0dp\"\n\n        \nandroid:layout_marginLeft=\n\"16dp\"\n\n        \nandroid:layout_marginRight=\n\"16dp\"\n\n        \nandroid:layout_marginTop=\n\"10dp\"\n\n        \nandroid:layout_weight=\n\"1\"\n\n        \nandroid:textColor=\n\"@color/colorFormMasterElementErrorTitle\"\n\n        \nandroid:textSize=\n\"@dimen/elementErrorTitleSize\"\n\n        \nandroid:visibility=\n\"gone\"\n\n        \ntools:text=\n\"Test Error\"\n \n/>\n\n\n\n</LinearLayout>\n\n\n\n\n\n\nForm Element Model\n\u00b6\n\n\nNote that a new model does not need to contain a body if BaseFormElement provides everything you need.\n\n\nclass\n \nFormCustomElement\n:\n \nBaseFormElement\n<\nString\n>\n \n{\n\n    \nconstructor\n()\n \n:\n \nsuper\n()\n\n    \nconstructor\n(\ntag\n:\n \nInt\n)\n \n:\n \nsuper\n(\ntag\n)\n\n\n}\n\n\n\n\n\n\nOptional: Form Builder Extension\n\u00b6\n\n\nCreate a FormBuildHelper DSL method and builder class for your custom form model.\n\n\n/** Builder method to add a CustomElement */\n\n\nclass\n \nCustomElementBuilder\n(\ntag\n:\n \nInt\n \n=\n \n-\n1\n)\n \n:\n \nBaseElementBuilder\n<\nString\n>(\ntag\n)\n \n{\n\n    \noverride\n \nfun\n \nbuild\n()\n \n=\n\n            \nFormCustomElement\n(\ntag\n).\napply\n \n{\n\n                \nthis\n@CustomElementBuilder\n.\nlet\n \n{\n\n                    \ntitle\n \n=\n \nit\n.\ntitle\n.\norEmpty\n()\n\n                    \nvalue\n \n=\n \nit\n.\nvalue\n\n                    \nhint\n \n=\n \nit\n.\nhint\n\n                    \nrightToLeft\n \n=\n \nit\n.\nrightToLeft\n\n                    \nmaxLines\n \n=\n \nit\n.\nmaxLines\n\n                    \nerror\n \n=\n \nit\n.\nerror\n\n                    \nrequired\n \n=\n \nit\n.\nrequired\n\n                    \nenabled\n \n=\n \nit\n.\nenabled\n\n                    \nvisible\n \n=\n \nit\n.\nvisible\n\n                    \nvalueObservers\n.\naddAll\n(\nit\n.\nvalueObservers\n)\n\n                \n}\n\n            \n}\n\n\n}\n\n\n\n/** FormBuildHelper extension to add a CustomElement */\n\n\nfun\n \nFormBuildHelper\n.\ncustomEx\n(\ntag\n:\n \nInt\n \n=\n \n-\n1\n,\n \ninit\n:\n \nCustomElementBuilder\n.()\n \n->\n \nUnit\n):\n \nFormCustomElement\n \n{\n\n    \nreturn\n \naddFormElement\n(\nCustomElementBuilder\n(\ntag\n).\napply\n(\ninit\n).\nbuild\n())\n\n\n}\n\n\n\n\n\n\nOptional: Form Element View State\n\u00b6\n\n\nCreate a view state class your custom form element value.\n\n\nclass\n \nFormCustomViewState\n(\nholder\n:\n \nViewHolder\n)\n \n:\n \nBaseFormViewState\n(\nholder\n)\n \n{\n\n    \nprivate\n \nvar\n \nvalue\n:\n \nString\n?\n \n=\n \nnull\n\n\n    \ninit\n \n{\n\n        \nval\n \neditText\n \n=\n \nholder\n.\nviewFinder\n.\nfind\n(\nR\n.\nid\n.\nformElementValue\n)\n \nas\n \nAppCompatEditText\n\n        \nvalue\n \n=\n \neditText\n.\ntext\n.\ntoString\n()\n\n    \n}\n\n\n    \noverride\n \nfun\n \nrestore\n(\nholder\n:\n \nViewHolder\n)\n \n{\n\n        \nsuper\n.\nrestore\n(\nholder\n)\n\n        \nholder\n.\nviewFinder\n.\nsetText\n(\nR\n.\nid\n.\nformElementValue\n,\n \nvalue\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nForm Element View Binder\n\u00b6\n\n\nCreate a view binder for your custom form element.\n\n\n\n\nViewBinder\n\n\n\n\nlayoutID parameter - Form element layout name\n\n\ntype parameter - Form element model class (ModelName::class.java)\n\n\nbinder parameter: \n\n\nmodel is a form element instance model\n\n\nfinder can find views or set fields of a view using its ID\n\n\npayloads can be replaced with \"_\" as it is not used\n\n\n\n\n\n\nviewStateProvider parameter - Form element view state provider\n\n\n\n\n\n\nclass\n \nCustomViewBinder\n(\nprivate\n \nval\n \ncontext\n:\n \nContext\n,\n \n\nprivate\n \nval\n \nformBuilder\n:\n \nFormBuildHelper\n)\n \n:\n \nBaseFormViewBinder\n()\n \n{\n\n    \nvar\n \nviewBinder\n \n=\n \nViewBinder\n(\nR\n.\nlayout\n.\nform_element_custom\n,\n \n    \nFormCustomElement\n::\nclass\n.\njava\n,\n \n{\n \nmodel\n,\n \nfinder\n,\n \n_\n \n->\n\n        \nval\n \ntextViewTitle\n \n=\n \nfinder\n.\nfind\n(\nR\n.\nid\n.\nformElementTitle\n)\n \nas\n \nAppCompatTextView\n\n        \nval\n \ntextViewError\n \n=\n \nfinder\n.\nfind\n(\nR\n.\nid\n.\nformElementError\n)\n \nas\n \nAppCompatTextView\n\n        \nval\n \nitemView\n \n=\n \nfinder\n.\ngetRootView\n()\n \nas\n \nView\n\n        \nbaseSetup\n(\nmodel\n,\n \ntextViewTitle\n,\n \ntextViewError\n,\n \nitemView\n)\n\n\n        \nval\n \neditTextValue\n \n=\n \nfinder\n.\nfind\n(\nR\n.\nid\n.\nformElementValue\n)\n \nas\n \nAppCompatEditText\n\n\n        \neditTextValue\n.\nsetText\n(\nmodel\n.\nvalueAsString\n)\n\n        \neditTextValue\n.\nhint\n \n=\n \nmodel\n.\nhint\n \n?:\n \n\"\"\n\n\n        \nsetEditTextFocusEnabled\n(\neditTextValue\n,\n \nitemView\n)\n\n\n        \neditTextValue\n.\nsetOnFocusChangeListener\n \n{\n \n_\n,\n \nhasFocus\n \n->\n\n            \nif\n \n(\nhasFocus\n)\n \n{\n\n                \ntextViewTitle\n.\nsetTextColor\n(\nContextCompat\n.\ngetColor\n(\ncontext\n,\n\n                        \nR\n.\ncolor\n.\ncolorFormMasterElementFocusedTitle\n))\n\n            \n}\n \nelse\n \n{\n\n                \ntextViewTitle\n.\nsetTextColor\n(\nContextCompat\n.\ngetColor\n(\ncontext\n,\n\n                        \nR\n.\ncolor\n.\ncolorFormMasterElementTextTitle\n))\n\n            \n}\n\n        \n}\n\n\n        \nmodel\n.\neditView\n \n=\n \neditTextValue\n\n\n        \n// Initially use 4 lines\n\n        \n// unless a different number was provided\n\n        \nif\n \n(\nmodel\n.\nmaxLines\n \n==\n \n1\n)\n \n{\n\n            \nmodel\n.\nmaxLines\n \n=\n \n4\n\n        \n}\n\n\n        \neditTextValue\n.\naddTextChangedListener\n(\nobject\n \n: \nTextWatcher\n \n{\n\n            \noverride\n \nfun\n \nbeforeTextChanged\n(\ncharSequence\n:\n \nCharSequence\n,\n \ni\n:\n \nInt\n,\n \ni2\n:\n \nInt\n,\n \ni3\n:\n \nInt\n)\n \n{}\n\n\n            \noverride\n \nfun\n \nonTextChanged\n(\ncharSequence\n:\n \nCharSequence\n,\n \ni\n:\n \nInt\n,\n \ni2\n:\n \nInt\n,\n \ni3\n:\n \nInt\n)\n \n{\n\n\n                \n// get current form element, existing value and new value\n\n                \nval\n \ncurrentValue\n \n=\n \nmodel\n.\nvalueAsString\n\n                \nval\n \nnewValue\n \n=\n \ncharSequence\n.\ntoString\n()\n\n\n                \n// trigger event only if the value is changed\n\n                \nif\n \n(\ncurrentValue\n \n!=\n \nnewValue\n)\n \n{\n\n                    \n// NOTE: Use setValue() \n\n                    \n// as this will suppress the unchecked cast\n\n                    \nmodel\n.\nsetValue\n(\nnewValue\n)\n\n                    \nmodel\n.\nerror\n \n=\n \nnull\n\n                    \nformBuilder\n.\nonValueChanged\n(\nmodel\n)\n\n                \n}\n\n            \n}\n\n\n            \noverride\n \nfun\n \nafterTextChanged\n(\neditable\n:\n \nEditable\n)\n \n{}\n\n        \n})\n\n    \n},\n \nobject\n \n: \nViewStateProvider\n<\nFormCustomElement\n,\n \nViewHolder\n>\n \n{\n\n        \noverride\n \nfun\n \ncreateViewStateID\n(\nmodel\n:\n \nFormCustomElement\n):\n \nInt\n \n{\n\n            \nreturn\n \nmodel\n.\nid\n\n        \n}\n\n\n        \noverride\n \nfun\n \ncreateViewState\n(\nholder\n:\n \nViewHolder\n):\n \nViewState\n<\nViewHolder\n>\n \n{\n\n            \nreturn\n \nFormCustomViewState\n(\nholder\n)\n\n        \n}\n\n    \n})\n\n\n    \nprivate\n \nfun\n \nsetEditTextFocusEnabled\n(\neditTextValue\n:\n \nAppCompatEditText\n,\n \nitemView\n:\n \nView\n)\n \n{\n\n        \nitemView\n.\nsetOnClickListener\n \n{\n\n            \neditTextValue\n.\nrequestFocus\n()\n\n            \nval\n \nimm\n \n=\n \ncontext\n.\ngetSystemService\n(\nContext\n.\nINPUT_METHOD_SERVICE\n)\n \nas\n \nInputMethodManager\n\n            \neditTextValue\n.\nsetSelection\n(\neditTextValue\n.\ntext\n.\nlength\n)\n\n            \nimm\n.\nshowSoftInput\n(\neditTextValue\n,\n \nInputMethodManager\n.\nSHOW_IMPLICIT\n)\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nUse your Custom Form Element\n\u00b6\n\n\nCreate a form activity for your custom form element.\n\n\n\n\nIMPORTANT\n\n\n\n\nRegister your custom view binder or you will get a RuntimeException\n\n\nRuntimeException: ViewRenderer not registered for this type\n\n\n\n\n\n\nclass\n \nCustomFormActivity\n \n:\n \nAppCompatActivity\n()\n \n{\n\n\n    \n// Setup the FormBuildHelper at the class level if necessary\n\n    \nprivate\n \nlateinit\n \nvar\n \nformBuilder\n:\n \nFormBuildHelper\n\n\n    \noverride\n \nfun\n \nonCreate\n(\nsavedInstanceState\n:\n \nBundle\n?)\n \n{\n\n        \nsuper\n.\nonCreate\n(\nsavedInstanceState\n)\n\n        \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_form\n)\n\n        \nsetupForm\n()\n\n    \n}\n\n\n    \nprivate\n \nenum\n \nclass\n \nTag\n \n{\n\n        \nCustom\n\n    \n}\n\n\n    \nprivate\n \nfun\n \nsetupForm\n()\n \n{\n\n        \nformBuilder\n \n=\n \nform\n(\nthis\n,\n \nrecyclerView\n)\n \n{\n\n            \ncustomEx\n(\nTag\n.\nCustom\n.\nordinal\n)\n \n{\n\n                \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nCustom\n)\n\n            \n}\n\n        \n}\n\n\n        \n// Required\n\n        \nformBuilder\n.\nregisterCustomViewBinder\n(\nCustomViewBinder\n(\nthis\n,\n \nformBuilder\n).\nviewBinder\n)\n\n    \n}\n\n\n}",
            "title": "Custom Element"
        },
        {
            "location": "/custom/element/#form-element-layout",
            "text": "Create a new XML layout file. We'll name it form_element_custom.xml.  <?xml version=\"1.0\" encoding=\"utf-8\"?>  <LinearLayout   xmlns:android= \"http://schemas.android.com/apk/res/android\" \n     xmlns:tools= \"http://schemas.android.com/tools\" \n     android:layout_width= \"match_parent\" \n     android:layout_height= \"wrap_content\" \n     android:background= \"@android:color/black\" \n     android:orientation= \"vertical\" \n     android:paddingBottom= \"16dp\" > \n\n     <View \n         android:layout_width= \"match_parent\" \n         android:layout_height= \"0.5dp\" \n         android:layout_marginLeft= \"16dp\" \n         android:layout_marginRight= \"16dp\" \n         android:background= \"@color/colorFormMasterDivider\"   /> \n\n     <LinearLayout \n         android:layout_width= \"match_parent\" \n         android:layout_height= \"wrap_content\" \n         android:layout_marginLeft= \"16dp\" \n         android:layout_marginRight= \"16dp\" \n         android:layout_marginTop= \"16dp\" \n         android:orientation= \"horizontal\" > \n\n         <android.support.v7.widget.AppCompatTextView \n             android:id= \"@+id/formElementTitle\" \n             android:layout_width= \"0dp\" \n             android:layout_height= \"wrap_content\" \n             android:layout_weight= \"2\" \n             android:textColor= \"@android:color/white\" \n             android:textSize= \"@dimen/elementTextTitleSize\" \n             tools:text= \"Test Title\"   /> \n\n         <android.support.v7.widget.AppCompatEditText \n             android:id= \"@+id/formElementValue\" \n             android:layout_width= \"0dp\" \n             android:layout_height= \"wrap_content\" \n             android:layout_weight= \"3\" \n             android:background= \"@null\" \n             android:gravity= \"end\" \n             android:imeOptions= \"actionNext\" \n             android:inputType= \"textNoSuggestions\" \n             android:maxLines= \"1\" \n             android:textColor= \"@color/colorFormMasterElementFocusedTitle\" \n             android:textSize= \"20sp\" \n             tools:text= \"Test Value\"   /> \n\n     </LinearLayout> \n\n     <android.support.v7.widget.AppCompatTextView \n         android:id= \"@+id/formElementError\" \n         android:layout_width= \"match_parent\" \n         android:layout_height= \"0dp\" \n         android:layout_marginLeft= \"16dp\" \n         android:layout_marginRight= \"16dp\" \n         android:layout_marginTop= \"10dp\" \n         android:layout_weight= \"1\" \n         android:textColor= \"@color/colorFormMasterElementErrorTitle\" \n         android:textSize= \"@dimen/elementErrorTitleSize\" \n         android:visibility= \"gone\" \n         tools:text= \"Test Error\"   />  </LinearLayout>",
            "title": "Form Element Layout"
        },
        {
            "location": "/custom/element/#form-element-model",
            "text": "Note that a new model does not need to contain a body if BaseFormElement provides everything you need.  class   FormCustomElement :   BaseFormElement < String >   { \n     constructor ()   :   super () \n     constructor ( tag :   Int )   :   super ( tag )  }",
            "title": "Form Element Model"
        },
        {
            "location": "/custom/element/#optional-form-builder-extension",
            "text": "Create a FormBuildHelper DSL method and builder class for your custom form model.  /** Builder method to add a CustomElement */  class   CustomElementBuilder ( tag :   Int   =   - 1 )   :   BaseElementBuilder < String >( tag )   { \n     override   fun   build ()   = \n             FormCustomElement ( tag ). apply   { \n                 this @CustomElementBuilder . let   { \n                     title   =   it . title . orEmpty () \n                     value   =   it . value \n                     hint   =   it . hint \n                     rightToLeft   =   it . rightToLeft \n                     maxLines   =   it . maxLines \n                     error   =   it . error \n                     required   =   it . required \n                     enabled   =   it . enabled \n                     visible   =   it . visible \n                     valueObservers . addAll ( it . valueObservers ) \n                 } \n             }  }  /** FormBuildHelper extension to add a CustomElement */  fun   FormBuildHelper . customEx ( tag :   Int   =   - 1 ,   init :   CustomElementBuilder .()   ->   Unit ):   FormCustomElement   { \n     return   addFormElement ( CustomElementBuilder ( tag ). apply ( init ). build ())  }",
            "title": "Optional: Form Builder Extension"
        },
        {
            "location": "/custom/element/#optional-form-element-view-state",
            "text": "Create a view state class your custom form element value.  class   FormCustomViewState ( holder :   ViewHolder )   :   BaseFormViewState ( holder )   { \n     private   var   value :   String ?   =   null \n\n     init   { \n         val   editText   =   holder . viewFinder . find ( R . id . formElementValue )   as   AppCompatEditText \n         value   =   editText . text . toString () \n     } \n\n     override   fun   restore ( holder :   ViewHolder )   { \n         super . restore ( holder ) \n         holder . viewFinder . setText ( R . id . formElementValue ,   value ) \n     }  }",
            "title": "Optional: Form Element View State"
        },
        {
            "location": "/custom/element/#form-element-view-binder",
            "text": "Create a view binder for your custom form element.   ViewBinder   layoutID parameter - Form element layout name  type parameter - Form element model class (ModelName::class.java)  binder parameter:   model is a form element instance model  finder can find views or set fields of a view using its ID  payloads can be replaced with \"_\" as it is not used    viewStateProvider parameter - Form element view state provider    class   CustomViewBinder ( private   val   context :   Context ,   private   val   formBuilder :   FormBuildHelper )   :   BaseFormViewBinder ()   { \n     var   viewBinder   =   ViewBinder ( R . layout . form_element_custom ,  \n     FormCustomElement :: class . java ,   {   model ,   finder ,   _   -> \n         val   textViewTitle   =   finder . find ( R . id . formElementTitle )   as   AppCompatTextView \n         val   textViewError   =   finder . find ( R . id . formElementError )   as   AppCompatTextView \n         val   itemView   =   finder . getRootView ()   as   View \n         baseSetup ( model ,   textViewTitle ,   textViewError ,   itemView ) \n\n         val   editTextValue   =   finder . find ( R . id . formElementValue )   as   AppCompatEditText \n\n         editTextValue . setText ( model . valueAsString ) \n         editTextValue . hint   =   model . hint   ?:   \"\" \n\n         setEditTextFocusEnabled ( editTextValue ,   itemView ) \n\n         editTextValue . setOnFocusChangeListener   {   _ ,   hasFocus   -> \n             if   ( hasFocus )   { \n                 textViewTitle . setTextColor ( ContextCompat . getColor ( context , \n                         R . color . colorFormMasterElementFocusedTitle )) \n             }   else   { \n                 textViewTitle . setTextColor ( ContextCompat . getColor ( context , \n                         R . color . colorFormMasterElementTextTitle )) \n             } \n         } \n\n         model . editView   =   editTextValue \n\n         // Initially use 4 lines \n         // unless a different number was provided \n         if   ( model . maxLines   ==   1 )   { \n             model . maxLines   =   4 \n         } \n\n         editTextValue . addTextChangedListener ( object   :  TextWatcher   { \n             override   fun   beforeTextChanged ( charSequence :   CharSequence ,   i :   Int ,   i2 :   Int ,   i3 :   Int )   {} \n\n             override   fun   onTextChanged ( charSequence :   CharSequence ,   i :   Int ,   i2 :   Int ,   i3 :   Int )   { \n\n                 // get current form element, existing value and new value \n                 val   currentValue   =   model . valueAsString \n                 val   newValue   =   charSequence . toString () \n\n                 // trigger event only if the value is changed \n                 if   ( currentValue   !=   newValue )   { \n                     // NOTE: Use setValue()  \n                     // as this will suppress the unchecked cast \n                     model . setValue ( newValue ) \n                     model . error   =   null \n                     formBuilder . onValueChanged ( model ) \n                 } \n             } \n\n             override   fun   afterTextChanged ( editable :   Editable )   {} \n         }) \n     },   object   :  ViewStateProvider < FormCustomElement ,   ViewHolder >   { \n         override   fun   createViewStateID ( model :   FormCustomElement ):   Int   { \n             return   model . id \n         } \n\n         override   fun   createViewState ( holder :   ViewHolder ):   ViewState < ViewHolder >   { \n             return   FormCustomViewState ( holder ) \n         } \n     }) \n\n     private   fun   setEditTextFocusEnabled ( editTextValue :   AppCompatEditText ,   itemView :   View )   { \n         itemView . setOnClickListener   { \n             editTextValue . requestFocus () \n             val   imm   =   context . getSystemService ( Context . INPUT_METHOD_SERVICE )   as   InputMethodManager \n             editTextValue . setSelection ( editTextValue . text . length ) \n             imm . showSoftInput ( editTextValue ,   InputMethodManager . SHOW_IMPLICIT ) \n         } \n     }  }",
            "title": "Form Element View Binder"
        },
        {
            "location": "/custom/element/#use-your-custom-form-element",
            "text": "Create a form activity for your custom form element.   IMPORTANT   Register your custom view binder or you will get a RuntimeException  RuntimeException: ViewRenderer not registered for this type    class   CustomFormActivity   :   AppCompatActivity ()   { \n\n     // Setup the FormBuildHelper at the class level if necessary \n     private   lateinit   var   formBuilder :   FormBuildHelper \n\n     override   fun   onCreate ( savedInstanceState :   Bundle ?)   { \n         super . onCreate ( savedInstanceState ) \n         setContentView ( R . layout . activity_form ) \n         setupForm () \n     } \n\n     private   enum   class   Tag   { \n         Custom \n     } \n\n     private   fun   setupForm ()   { \n         formBuilder   =   form ( this ,   recyclerView )   { \n             customEx ( Tag . Custom . ordinal )   { \n                 title   =   getString ( R . string . Custom ) \n             } \n         } \n\n         // Required \n         formBuilder . registerCustomViewBinder ( CustomViewBinder ( this ,   formBuilder ). viewBinder ) \n     }  }",
            "title": "Use your Custom Form Element"
        },
        {
            "location": "/about/contributing/",
            "text": "Contributing\n\u00b6\n\n\nInterested in contributing to KFormMaster? Want to report a bug? Before\nyou do, please read the following guidelines.\n\n\nSubmission context\n\u00b6\n\n\nGot a question or problem?\n\u00b6\n\n\nFor quick questions there's no need to open an issue as you can reach us on\n\ngitter.im\n.\n\n\nFound a bug?\n\u00b6\n\n\nIf you found a bug in the source code, you can help us by submitting an issue\nto the \nissue tracker\n in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the\n\nsubmission guidelines\n.\n\n\nMissing a feature?\n\u00b6\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first. Please consider what kind of change\nit is:\n\n\n\n\n\n\nFor a \nmajor feature\n, first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.\n\n\n\n\n\n\nSmall features and bugs\n can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether it benefits the\n  overall functionality of the library.\n\n\n\n\n\n\nSubmission guidelines\n\u00b6\n\n\nSubmitting an issue\n\u00b6\n\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.\n\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.\n\n\nUnfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.\n\n\nSubmitting a Pull Request (PR)\n\u00b6\n\n\nSearch GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.\n\n\n\n\n\n\nDevelopment\n: Fork the project and make your changes in a separate git branch and add descriptive messages to\n  your commits.\n\n\n\n\n\n\nBuild\n: Before submitting a pull requests, run a gradle build. This is\n  a mandatory requirement for your PR to get accepted, as the library should at\n  all times be installable through GitHub (Such as through https://jitpack.io/).\n\n\n\n\n\n\nPull Request\n: Send a PR to \nKFormMaster:master\n. If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.\n\n\n\n\n\n\nAfter your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#contributing",
            "text": "Interested in contributing to KFormMaster? Want to report a bug? Before\nyou do, please read the following guidelines.",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#submission-context",
            "text": "",
            "title": "Submission context"
        },
        {
            "location": "/about/contributing/#got-a-question-or-problem",
            "text": "For quick questions there's no need to open an issue as you can reach us on gitter.im .",
            "title": "Got a question or problem?"
        },
        {
            "location": "/about/contributing/#found-a-bug",
            "text": "If you found a bug in the source code, you can help us by submitting an issue\nto the  issue tracker  in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the submission guidelines .",
            "title": "Found a bug?"
        },
        {
            "location": "/about/contributing/#missing-a-feature",
            "text": "You can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first. Please consider what kind of change\nit is:    For a  major feature , first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.    Small features and bugs  can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether it benefits the\n  overall functionality of the library.",
            "title": "Missing a feature?"
        },
        {
            "location": "/about/contributing/#submission-guidelines",
            "text": "",
            "title": "Submission guidelines"
        },
        {
            "location": "/about/contributing/#submitting-an-issue",
            "text": "Before you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.  We want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.  Unfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.",
            "title": "Submitting an issue"
        },
        {
            "location": "/about/contributing/#submitting-a-pull-request-pr",
            "text": "Search GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.    Development : Fork the project and make your changes in a separate git branch and add descriptive messages to\n  your commits.    Build : Before submitting a pull requests, run a gradle build. This is\n  a mandatory requirement for your PR to get accepted, as the library should at\n  all times be installable through GitHub (Such as through https://jitpack.io/).    Pull Request : Send a PR to  KFormMaster:master . If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.    After your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.",
            "title": "Submitting a Pull Request (PR)"
        },
        {
            "location": "/about/credits/",
            "text": "adib2149/FormMaster\n is the original project this Kotlin port is based on\n\n\nshaymargolis/FormMaster\n is used for the generics support and addition of the AutoComplete form element\n\n\nvivchar/RendererRecyclerViewAdapter\n is used to support several types of cells\n\n\nsplitwise/TokenAutoComplete\n is used for the AutoCompleteToken form element\n\n\n@area55git\n created the KFormMaster logo",
            "title": "Credits"
        },
        {
            "location": "/about/license/",
            "text": "Copyright 2018 Justin Kirk\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        }
    ]
}