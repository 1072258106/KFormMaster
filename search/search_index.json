{
    "docs": [
        {
            "location": "/",
            "text": "Installation\n\u00b6\n\n\nAdd this in your app's \nbuild.gradle\n file:\n\n\next {\n  kFormMasterVersion = [Latest]\n}\n\nimplementation \"com.thejuki:k-form-master:$kFormMasterVersion\"\n\n\n\n\n\nHow to use\n\u00b6\n\n\n\n\nStep 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo).\n\n\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n<LinearLayout\n\n    \nxmlns:android=\n\"http://schemas.android.com/apk/res/android\"\n\n    \nxmlns:tools=\n\"http://schemas.android.com/tools\"\n\n    \nandroid:layout_width=\n\"match_parent\"\n\n    \nandroid:layout_height=\n\"match_parent\"\n\n    \nandroid:orientation=\n\"vertical\"\n>\n\n\n    \n<android.support.v7.widget.RecyclerView\n\n        \nandroid:layout_width=\n\"match_parent\"\n\n        \nandroid:layout_height=\n\"match_parent\"\n\n        \nandroid:orientation=\n\"vertical\"\n\n        \nandroid:id=\n\"@+id/recyclerView\"\n\n        \nandroid:descendantFocusability=\n\"beforeDescendants\"\n \n/>\n\n\n\n</LinearLayout>\n\n\n\n\n\n\n\n\nStep 2 (No DSL). Add the Form Elements programmatically in your activity\n\n\n\n\n// Initialize variables\n\n\nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n)\n\n\nformBuilder\n.\nattachRecyclerView\n(\nthis\n,\n \nrecyclerView\n)\n\n\n\nval\n \nelements\n:\n \nMutableList\n<\nBaseFormElement\n<*>>\n \n=\n \nmutableListOf\n()\n\n\n\n// Declare form elements\n\n\nval\n \nemailElement\n \n=\n \nFormEmailEditTextElement\n(\nEmail\n.\nordinal\n)\n\n        \n.\nsetTitle\n(\ngetString\n(\nR\n.\nstring\n.\nemail\n))\n\n\nelements\n.\nadd\n(\nemailElement\n)\n\n\n\nval\n \npasswordElement\n \n=\n \nFormPasswordEditTextElement\n(\nPassword\n.\nordinal\n)\n\n        \n.\nsetTitle\n(\ngetString\n(\nR\n.\nstring\n.\npassword\n))\n\n\nelements\n.\nadd\n(\npasswordElement\n)\n\n\n\n// Add form elements (Form is refreshed for you)\n\n\nformBuilder\n.\naddFormElements\n(\nelements\n)\n\n\n\n\n\n\n\n\nStep 2 (With DSL). Add the Form Elements programmatically in your activity\n\n\n\n\nformBuilder\n \n=\n \nform\n(\nthis\n,\n \nrecyclerView\n)\n \n{\n\n    \nemail\n(\nEmail\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nemail\n)\n\n    \n}\n\n    \npassword\n(\nPassword\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\npassword\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nReference\n\u00b6\n\n\nItem Definition\n\u00b6\n\n\nHeader:\n\u00b6\n\n\nval\n \nheader\n \n=\n \nFormHeader\n.\ncreateInstance\n(\ngetString\n(\nR\n.\nstring\n.\nHeaderString\n))\n\n\n\n\n\n\nRegular Elements:\n\u00b6\n\n\nGeneral object format\n\n\nval\n \nelement\n \n=\n \nForm\n[\nType\n]\nElement\n<\nT\n:\n \nSerializable\n>(\nTAG_NAME\n:\n \nInt\n)\n \n// Tag is optional. It is recommended to use an Enum's ordinal.\n\n    \n.\nsetTitle\n(\n\"Pick your favourite fruit\"\n)\n \n// setting title\n\n    \n.\nsetValue\n(\n\"Banana\"\n)\n \n// setting value of the field, if any\n\n    \n.\nsetOptions\n(\nfruits\n)\n \n// setting pickable options, if any\n\n    \n.\nsetHint\n(\n\"e.g. banana, guava etc\"\n)\n \n// setting hints, if any\n\n    \n.\nsetRequired\n(\nfalse\n)\n \n// marking if the form element is required to be filled to make the form valid, include if needed\n\n\n\n\n\n\nSamples:\n\n\n// Example Enum\n\n\nprivate\n \nenum\n \nclass\n \nTag\n \n{\n\n    \nEmail\n,\n\n    \nPhone\n,\n\n    \nLocation\n,\n\n    \nAddress\n,\n\n    \nZipCode\n,\n\n    \nDate\n,\n\n    \nTime\n,\n\n    \nDateTime\n,\n\n    \nPassword\n,\n\n    \nSingleItem\n,\n\n    \nMultiItems\n,\n\n    \nAutoCompleteElement\n,\n\n    \nAutoCompleteTokenElement\n,\n\n    \nButtonElement\n,\n\n    \nTextViewElement\n,\n\n    \nSwitchElement\n,\n\n    \nSliderElement\n,\n\n    \nCheckBoxElement\n,\n\n\n}\n\n\n\n// Example Picker object\n\n\nimport\n \njava.io.Serializable\n\n\n\ndata\n \nclass\n \nListItem\n(\nval\n \nid\n:\n \nLong\n?\n \n=\n \nnull\n,\n\n                    \nval\n \nname\n:\n \nString\n?\n \n=\n \nnull\n\n\n):\n \nSerializable\n \n{\n\n    \noverride\n \nfun\n \ntoString\n():\n \nString\n \n{\n\n        \nreturn\n \nname\n.\norEmpty\n()\n\n    \n}\n\n\n}\n\n\n\n// Example Autocomplete object\n\n\nimport\n \njava.io.Serializable\n\n\n\ndata\n \nclass\n \nContactItem\n(\nval\n \nid\n:\n \nLong\n?\n \n=\n \nnull\n,\n\n                       \nval\n \nvalue\n:\n \nString\n?\n \n=\n \nnull\n,\n\n                       \nval\n \nlabel\n:\n \nString\n?\n \n=\n \nnull\n\n\n):\n \nSerializable\n \n{\n\n    \noverride\n \nfun\n \ntoString\n():\n \nString\n \n{\n\n        \nreturn\n \nlabel\n.\norEmpty\n()\n\n    \n}\n\n\n}\n\n\n\nval\n \nlistener\n \n=\n \nobject\n \n: \nOnFormElementValueChangedListener\n \n{\n\n    \noverride\n \nfun\n \nonValueChanged\n(\nformElement\n:\n \nBaseFormElement\n<*>)\n \n{\n\n\n    \n}\n\n\n}\n\n\n\nformBuilder\n \n=\n \nform\n(\nthis\n@ActivityName\n,\n \nrecyclerView\n,\n \nlistener\n,\n \ncacheForm\n \n=\n \ntrue\n)\n \n{\n\n\n    \n// Header\n\n    \nheader\n \n{\n \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nPersonalInfo\n)\n \n}\n\n\n    \n// Email EditText\n\n    \nemail\n(\nEmail\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nemail\n)\n\n        \nhint\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nemail_hint\n)\n\n    \n}\n\n\n    \n// Password EditText\n\n    \npassword\n(\nPassword\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\npassword\n)\n\n    \n}\n\n\n    \n// Phone EditText\n\n    \nphone\n(\nPhone\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nPhone\n)\n\n        \nvalue\n \n=\n \n\"+8801712345678\"\n\n    \n}\n\n\n    \n// Singleline text EditText\n\n    \ntext\n(\nLocation\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nLocation\n)\n\n        \nvalue\n \n=\n \n\"Dhaka\"\n\n    \n}\n\n\n    \n// Multiline EditText\n\n    \ntextArea\n(\nAddress\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nAddress\n)\n\n        \nvalue\n \n=\n \n\"\"\n\n    \n}\n\n\n    \n// Number EditText\n\n    \nnumber\n(\nZipCode\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nZipCode\n)\n\n        \nvalue\n \n=\n \n\"1000\"\n\n    \n}\n\n\n    \n// Date\n\n    \ndate\n(\nTag\n.\nDate\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nDate\n)\n\n        \ndateValue\n \n=\n \nDate\n()\n\n        \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy\"\n,\n \nLocale\n.\nUS\n)\n\n    \n}\n\n\n    \n// Time\n\n    \ntime\n(\nTime\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nTime\n)\n\n        \ndateValue\n \n=\n \nDate\n()\n\n        \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"hh:mm a\"\n,\n \nLocale\n.\nUS\n)\n\n    \n}\n\n\n    \n// DateTime\n\n    \ndateTime\n(\nDateTime\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nDateTime\n)\n\n        \ndateValue\n \n=\n \nDate\n()\n\n        \ndateFormat\n \n=\n \nSimpleDateFormat\n(\n\"MM/dd/yyyy hh:mm a\"\n,\n \nLocale\n.\nUS\n)\n\n    \n}\n\n\n    \n// DropDown\n\n    \ndropDown\n<\nListItem\n>(\nSingleItem\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nSingleItem\n)\n\n        \ndialogTitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nSingleItem\n)\n\n        \noptions\n \n=\n \nfruits\n\n        \nvalue\n \n=\n \nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n)\n\n    \n}\n\n\n    \n// MultiCheckBox\n\n    \nmultiCheckBox\n<\nListItem\n>(\nMultiItems\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nMultiItems\n)\n\n        \ndialogTitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nMultiItems\n)\n\n        \noptions\n \n=\n \nfruits\n\n        \noptionsSelected\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n))\n\n    \n}\n\n\n    \n// AutoComplete\n\n    \nautoComplete\n<\nContactItem\n>(\nAutoCompleteElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nAutoComplete\n)\n\n        \narrayAdapter\n \n=\n \nContactAutoCompleteAdapter\n(\nthis\n@FormListenerActivity\n,\n\n                \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n,\n \ndefaultItems\n \n=\n\n        \narrayListOf\n(\nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"\"\n,\n \nlabel\n \n=\n \n\"Try \\\"Apple May\\\"\"\n)))\n\n        \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n        \nvalue\n \n=\n \nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"John Smith\"\n,\n \nlabel\n \n=\n \n\"John Smith (Tester)\"\n)\n\n    \n}\n\n\n    \n// AutoCompleteToken\n\n    \nautoCompleteToken\n<\nArrayList\n<\nContactItem\n>>(\nAutoCompleteTokenElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nAutoCompleteToken\n)\n\n        \narrayAdapter\n \n=\n \nEmailAutoCompleteAdapter\n(\nthis\n@FormListenerActivity\n,\n\n                \nandroid\n.\nR\n.\nlayout\n.\nsimple_list_item_1\n)\n\n        \ndropdownWidth\n \n=\n \nViewGroup\n.\nLayoutParams\n.\nMATCH_PARENT\n\n    \n}\n\n\n    \n// Text View\n\n    \ntextView\n(\nTextViewElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nTextView\n)\n\n        \nvalue\n \n=\n \n\"This is readonly!\"\n\n    \n}\n\n\n    \n// Switch\n\n    \nswitch\n<\nString\n>(\nSwitchElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nSwitch\n)\n\n        \nvalue\n \n=\n \n\"Yes\"\n\n        \nonValue\n \n=\n \n\"Yes\"\n\n        \noffValue\n \n=\n \n\"No\"\n\n    \n}\n\n\n    \n// Slider\n\n    \nslider\n(\nSliderElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nSlider\n)\n\n        \nvalue\n \n=\n \n50\n\n        \nmin\n \n=\n \n0\n\n        \nmax\n \n=\n \n100\n\n        \nsteps\n \n=\n \n20\n\n    \n}\n\n\n    \n// CheckBox\n\n    \ncheckBox\n<\nBoolean\n>(\nCheckBoxElement\n.\nordinal\n)\n \n{\n\n        \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nCheckBox\n)\n\n        \nvalue\n \n=\n \ntrue\n\n        \ncheckedValue\n \n=\n \ntrue\n\n        \nunCheckedValue\n \n=\n \nfalse\n\n    \n}\n\n\n    \n// Button\n\n    \nbutton\n(\nButtonElement\n.\nordinal\n)\n \n{\n\n        \nvalue\n \n=\n \ngetString\n(\nR\n.\nstring\n.\nButton\n)\n\n        \nvalueObservers\n.\nadd\n({\n \nnewValue\n,\n \nelement\n \n->\n\n            \nval\n \nconfirmAlert\n \n=\n \nAlertDialog\n.\nBuilder\n(\nthis\n@PartialScreenFormActivity\n).\ncreate\n()\n\n            \nconfirmAlert\n.\nsetTitle\n(\nthis\n@PartialScreenFormActivity\n.\ngetString\n(\nR\n.\nstring\n.\nConfirm\n))\n\n            \nconfirmAlert\n.\nsetButton\n(\nAlertDialog\n.\nBUTTON_POSITIVE\n,\n \nthis\n@PartialScreenFormActivity\n.\ngetString\n(\nandroid\n.\nR\n.\nstring\n.\nok\n),\n \n{\n \n_\n,\n \n_\n \n->\n\n                \n// Could be used to clear another field:\n\n                \nval\n \ndateToDeleteElement\n \n=\n \nformBuilder\n.\ngetFormElement\n<\nFormPickerDateElement\n>(\nTag\n.\nDate\n.\nordinal\n)\n\n                \n// Display current date\n\n                \nToast\n.\nmakeText\n(\nthis\n@FullscreenFormActivity\n,\n\n                        \ndateToDeleteElement\n.\nvalue\n?.\ngetTime\n().\ntoString\n(),\n\n                        \nToast\n.\nLENGTH_SHORT\n).\nshow\n()\n\n                \ndateToDeleteElement\n.\nclear\n()\n\n                \nformBuilder\n.\nonValueChanged\n(\ndateToDeleteElement\n)\n\n            \n})\n\n            \nconfirmAlert\n.\nsetButton\n(\nAlertDialog\n.\nBUTTON_NEGATIVE\n,\n \nthis\n@PartialScreenFormActivity\n.\ngetString\n(\nandroid\n.\nR\n.\nstring\n.\ncancel\n),\n \n{\n \n_\n,\n \n_\n \n->\n\n            \n})\n\n            \nconfirmAlert\n.\nshow\n()\n\n        \n})\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCache Form Elements\n\u00b6\n\n\nBy default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled.\nNOTE: This is enabled by default now.\n\n\nRefresh Dropdown or MultiCheckBox options\n\u00b6\n\n\nAfter changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.\n\n\nelement\n.\noptions\n \n=\n \nlistOf\n()\n\n\nelement\n.\nreInitDialog\n(\nthis\n \n/* context */\n,\n \nformBuilder\n)\n\n\n\n\n\n\nSet form element value change listener to get changed value instantly\n\u00b6\n\n\nWhile creating a new instance of FormBuildHelper, add a listener in the constructor\n\n\nvar\n \nformBuilder\n \n=\n \nFormBuildHelper\n(\nthis\n,\n \nobject\n \n: \nOnFormElementValueChangedListener\n \n{\n\n    \noverride\n \nfun\n \nonValueChanged\n(\nformElement\n:\n \nBaseFormElement\n<*>)\n \n{\n\n         \n// do anything here with formElement.value\n\n    \n}\n\n\n},\n \nfindViewById\n(\nR\n.\nid\n.\nrecyclerView\n),\n \ncacheForm\n \n=\n \ntrue\n)\n\n\n\n\n\n\nGet value for unique form elements\n\u00b6\n\n\nUse the unique tag assigned earlier to retrieve value (See examples in this repo)\n\n\nval\n \nelement\n \n=\n \nformBuilder\n.\ngetFormElement\n<\nFormEmailEditTextElement\n>(\nEmail\n.\nordinal\n)\n\n\nval\n \nvalue\n:\n \nString\n \n=\n \nelement\n.\nvalue\n\n\n\n\n\n\nUse the added index of the element instead if you did not assign a tag.\n\n\nval\n \nelement\n \n=\n \nformBuilder\n.\ngetElementAtIndex\n(\n2\n)\n\n\nval\n \nvalue\n:\n \nString\n \n=\n \nelement\n?.\nvalue\n \nas\n \nString\n\n\n\n\n\n\nCheck if form is valid\n\u00b6\n\n\nUse this variable (method in Java) if you need to check whether the required elements of the form are completed\n\n\nformBuilder\n.\nisValidForm\n \n// returns Boolean whether the form is valid or not\n\n\n\n\n\n\nForm accent color change\n\u00b6\n\n\nIf you want to change the colors, just override the colors in your \ncolors.xml\n file:\n\n\n<color\n \nname=\n\"colorFormMasterHeaderBackground\"\n>\n#DDDDDD\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterHeaderText\"\n>\n#000000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementBackground\"\n>\n#FFFFFF\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextTitle\"\n>\n#222222\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementErrorTitle\"\n>\n#FF0000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextValue\"\n>\n#000000\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementButtonText\"\n>\n#42A5F5\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementFocusedTitle\"\n>\n#0277bd\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementTextDisabled\"\n>\n#757575\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterDivider\"\n>\n#DDDDDD\n</color>\n\n\n<color\n \nname=\n\"colorFormMasterElementToken\"\n>\n#f5f5f5\n</color>\n\n\n\n\n\n\nForm UI change\n\u00b6\n\n\nIf you want to change how the forms look, just override a form_element XML in your project.\n\n\nJust make sure to keep the ID name the same as it is in the library for the components.\n\n\nandroid\n:\nid\n=\n\"@+id/formElementTitle\"\n\n\nandroid\n:\nid\n=\n\"@+id/formElementValue\"\n\n\n...",
            "title": "Getting Started"
        },
        {
            "location": "/#installation",
            "text": "Add this in your app's  build.gradle  file:  ext {\n  kFormMasterVersion = [Latest]\n}\n\nimplementation \"com.thejuki:k-form-master:$kFormMasterVersion\"",
            "title": "Installation"
        },
        {
            "location": "/#how-to-use",
            "text": "Step 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo).   <?xml version=\"1.0\" encoding=\"utf-8\"?>  <LinearLayout \n     xmlns:android= \"http://schemas.android.com/apk/res/android\" \n     xmlns:tools= \"http://schemas.android.com/tools\" \n     android:layout_width= \"match_parent\" \n     android:layout_height= \"match_parent\" \n     android:orientation= \"vertical\" > \n\n     <android.support.v7.widget.RecyclerView \n         android:layout_width= \"match_parent\" \n         android:layout_height= \"match_parent\" \n         android:orientation= \"vertical\" \n         android:id= \"@+id/recyclerView\" \n         android:descendantFocusability= \"beforeDescendants\"   />  </LinearLayout>    Step 2 (No DSL). Add the Form Elements programmatically in your activity   // Initialize variables  formBuilder   =   FormBuildHelper ( this )  formBuilder . attachRecyclerView ( this ,   recyclerView )  val   elements :   MutableList < BaseFormElement <*>>   =   mutableListOf ()  // Declare form elements  val   emailElement   =   FormEmailEditTextElement ( Email . ordinal ) \n         . setTitle ( getString ( R . string . email ))  elements . add ( emailElement )  val   passwordElement   =   FormPasswordEditTextElement ( Password . ordinal ) \n         . setTitle ( getString ( R . string . password ))  elements . add ( passwordElement )  // Add form elements (Form is refreshed for you)  formBuilder . addFormElements ( elements )    Step 2 (With DSL). Add the Form Elements programmatically in your activity   formBuilder   =   form ( this ,   recyclerView )   { \n     email ( Email . ordinal )   { \n         title   =   getString ( R . string . email ) \n     } \n     password ( Password . ordinal )   { \n         title   =   getString ( R . string . password ) \n     }  }",
            "title": "How to use"
        },
        {
            "location": "/#reference",
            "text": "",
            "title": "Reference"
        },
        {
            "location": "/#item-definition",
            "text": "",
            "title": "Item Definition"
        },
        {
            "location": "/#header",
            "text": "val   header   =   FormHeader . createInstance ( getString ( R . string . HeaderString ))",
            "title": "Header:"
        },
        {
            "location": "/#regular-elements",
            "text": "General object format  val   element   =   Form [ Type ] Element < T :   Serializable >( TAG_NAME :   Int )   // Tag is optional. It is recommended to use an Enum's ordinal. \n     . setTitle ( \"Pick your favourite fruit\" )   // setting title \n     . setValue ( \"Banana\" )   // setting value of the field, if any \n     . setOptions ( fruits )   // setting pickable options, if any \n     . setHint ( \"e.g. banana, guava etc\" )   // setting hints, if any \n     . setRequired ( false )   // marking if the form element is required to be filled to make the form valid, include if needed   Samples:  // Example Enum  private   enum   class   Tag   { \n     Email , \n     Phone , \n     Location , \n     Address , \n     ZipCode , \n     Date , \n     Time , \n     DateTime , \n     Password , \n     SingleItem , \n     MultiItems , \n     AutoCompleteElement , \n     AutoCompleteTokenElement , \n     ButtonElement , \n     TextViewElement , \n     SwitchElement , \n     SliderElement , \n     CheckBoxElement ,  }  // Example Picker object  import   java.io.Serializable  data   class   ListItem ( val   id :   Long ?   =   null , \n                     val   name :   String ?   =   null  ):   Serializable   { \n     override   fun   toString ():   String   { \n         return   name . orEmpty () \n     }  }  // Example Autocomplete object  import   java.io.Serializable  data   class   ContactItem ( val   id :   Long ?   =   null , \n                        val   value :   String ?   =   null , \n                        val   label :   String ?   =   null  ):   Serializable   { \n     override   fun   toString ():   String   { \n         return   label . orEmpty () \n     }  }  val   listener   =   object   :  OnFormElementValueChangedListener   { \n     override   fun   onValueChanged ( formElement :   BaseFormElement <*>)   { \n\n     }  }  formBuilder   =   form ( this @ActivityName ,   recyclerView ,   listener ,   cacheForm   =   true )   { \n\n     // Header \n     header   {   title   =   getString ( R . string . PersonalInfo )   } \n\n     // Email EditText \n     email ( Email . ordinal )   { \n         title   =   getString ( R . string . email ) \n         hint   =   getString ( R . string . email_hint ) \n     } \n\n     // Password EditText \n     password ( Password . ordinal )   { \n         title   =   getString ( R . string . password ) \n     } \n\n     // Phone EditText \n     phone ( Phone . ordinal )   { \n         title   =   getString ( R . string . Phone ) \n         value   =   \"+8801712345678\" \n     } \n\n     // Singleline text EditText \n     text ( Location . ordinal )   { \n         title   =   getString ( R . string . Location ) \n         value   =   \"Dhaka\" \n     } \n\n     // Multiline EditText \n     textArea ( Address . ordinal )   { \n         title   =   getString ( R . string . Address ) \n         value   =   \"\" \n     } \n\n     // Number EditText \n     number ( ZipCode . ordinal )   { \n         title   =   getString ( R . string . ZipCode ) \n         value   =   \"1000\" \n     } \n\n     // Date \n     date ( Tag . Date . ordinal )   { \n         title   =   getString ( R . string . Date ) \n         dateValue   =   Date () \n         dateFormat   =   SimpleDateFormat ( \"MM/dd/yyyy\" ,   Locale . US ) \n     } \n\n     // Time \n     time ( Time . ordinal )   { \n         title   =   getString ( R . string . Time ) \n         dateValue   =   Date () \n         dateFormat   =   SimpleDateFormat ( \"hh:mm a\" ,   Locale . US ) \n     } \n\n     // DateTime \n     dateTime ( DateTime . ordinal )   { \n         title   =   getString ( R . string . DateTime ) \n         dateValue   =   Date () \n         dateFormat   =   SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" ,   Locale . US ) \n     } \n\n     // DropDown \n     dropDown < ListItem >( SingleItem . ordinal )   { \n         title   =   getString ( R . string . SingleItem ) \n         dialogTitle   =   getString ( R . string . SingleItem ) \n         options   =   fruits \n         value   =   ListItem ( id   =   1 ,   name   =   \"Banana\" ) \n     } \n\n     // MultiCheckBox \n     multiCheckBox < ListItem >( MultiItems . ordinal )   { \n         title   =   getString ( R . string . MultiItems ) \n         dialogTitle   =   getString ( R . string . MultiItems ) \n         options   =   fruits \n         optionsSelected   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" )) \n     } \n\n     // AutoComplete \n     autoComplete < ContactItem >( AutoCompleteElement . ordinal )   { \n         title   =   getString ( R . string . AutoComplete ) \n         arrayAdapter   =   ContactAutoCompleteAdapter ( this @FormListenerActivity , \n                 android . R . layout . simple_list_item_1 ,   defaultItems   = \n         arrayListOf ( ContactItem ( id   =   1 ,   value   =   \"\" ,   label   =   \"Try \\\"Apple May\\\"\" ))) \n         dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT \n         value   =   ContactItem ( id   =   1 ,   value   =   \"John Smith\" ,   label   =   \"John Smith (Tester)\" ) \n     } \n\n     // AutoCompleteToken \n     autoCompleteToken < ArrayList < ContactItem >>( AutoCompleteTokenElement . ordinal )   { \n         title   =   getString ( R . string . AutoCompleteToken ) \n         arrayAdapter   =   EmailAutoCompleteAdapter ( this @FormListenerActivity , \n                 android . R . layout . simple_list_item_1 ) \n         dropdownWidth   =   ViewGroup . LayoutParams . MATCH_PARENT \n     } \n\n     // Text View \n     textView ( TextViewElement . ordinal )   { \n         title   =   getString ( R . string . TextView ) \n         value   =   \"This is readonly!\" \n     } \n\n     // Switch \n     switch < String >( SwitchElement . ordinal )   { \n         title   =   getString ( R . string . Switch ) \n         value   =   \"Yes\" \n         onValue   =   \"Yes\" \n         offValue   =   \"No\" \n     } \n\n     // Slider \n     slider ( SliderElement . ordinal )   { \n         title   =   getString ( R . string . Slider ) \n         value   =   50 \n         min   =   0 \n         max   =   100 \n         steps   =   20 \n     } \n\n     // CheckBox \n     checkBox < Boolean >( CheckBoxElement . ordinal )   { \n         title   =   getString ( R . string . CheckBox ) \n         value   =   true \n         checkedValue   =   true \n         unCheckedValue   =   false \n     } \n\n     // Button \n     button ( ButtonElement . ordinal )   { \n         value   =   getString ( R . string . Button ) \n         valueObservers . add ({   newValue ,   element   -> \n             val   confirmAlert   =   AlertDialog . Builder ( this @PartialScreenFormActivity ). create () \n             confirmAlert . setTitle ( this @PartialScreenFormActivity . getString ( R . string . Confirm )) \n             confirmAlert . setButton ( AlertDialog . BUTTON_POSITIVE ,   this @PartialScreenFormActivity . getString ( android . R . string . ok ),   {   _ ,   _   -> \n                 // Could be used to clear another field: \n                 val   dateToDeleteElement   =   formBuilder . getFormElement < FormPickerDateElement >( Tag . Date . ordinal ) \n                 // Display current date \n                 Toast . makeText ( this @FullscreenFormActivity , \n                         dateToDeleteElement . value ?. getTime (). toString (), \n                         Toast . LENGTH_SHORT ). show () \n                 dateToDeleteElement . clear () \n                 formBuilder . onValueChanged ( dateToDeleteElement ) \n             }) \n             confirmAlert . setButton ( AlertDialog . BUTTON_NEGATIVE ,   this @PartialScreenFormActivity . getString ( android . R . string . cancel ),   {   _ ,   _   -> \n             }) \n             confirmAlert . show () \n         }) \n     }  }",
            "title": "Regular Elements:"
        },
        {
            "location": "/#cache-form-elements",
            "text": "By default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled.\nNOTE: This is enabled by default now.",
            "title": "Cache Form Elements"
        },
        {
            "location": "/#refresh-dropdown-or-multicheckbox-options",
            "text": "After changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.  element . options   =   listOf ()  element . reInitDialog ( this   /* context */ ,   formBuilder )",
            "title": "Refresh Dropdown or MultiCheckBox options"
        },
        {
            "location": "/#set-form-element-value-change-listener-to-get-changed-value-instantly",
            "text": "While creating a new instance of FormBuildHelper, add a listener in the constructor  var   formBuilder   =   FormBuildHelper ( this ,   object   :  OnFormElementValueChangedListener   { \n     override   fun   onValueChanged ( formElement :   BaseFormElement <*>)   { \n          // do anything here with formElement.value \n     }  },   findViewById ( R . id . recyclerView ),   cacheForm   =   true )",
            "title": "Set form element value change listener to get changed value instantly"
        },
        {
            "location": "/#get-value-for-unique-form-elements",
            "text": "Use the unique tag assigned earlier to retrieve value (See examples in this repo)  val   element   =   formBuilder . getFormElement < FormEmailEditTextElement >( Email . ordinal )  val   value :   String   =   element . value   Use the added index of the element instead if you did not assign a tag.  val   element   =   formBuilder . getElementAtIndex ( 2 )  val   value :   String   =   element ?. value   as   String",
            "title": "Get value for unique form elements"
        },
        {
            "location": "/#check-if-form-is-valid",
            "text": "Use this variable (method in Java) if you need to check whether the required elements of the form are completed  formBuilder . isValidForm   // returns Boolean whether the form is valid or not",
            "title": "Check if form is valid"
        },
        {
            "location": "/#form-accent-color-change",
            "text": "If you want to change the colors, just override the colors in your  colors.xml  file:  <color   name= \"colorFormMasterHeaderBackground\" > #DDDDDD </color>  <color   name= \"colorFormMasterHeaderText\" > #000000 </color>  <color   name= \"colorFormMasterElementBackground\" > #FFFFFF </color>  <color   name= \"colorFormMasterElementTextTitle\" > #222222 </color>  <color   name= \"colorFormMasterElementErrorTitle\" > #FF0000 </color>  <color   name= \"colorFormMasterElementTextValue\" > #000000 </color>  <color   name= \"colorFormMasterElementButtonText\" > #42A5F5 </color>  <color   name= \"colorFormMasterElementFocusedTitle\" > #0277bd </color>  <color   name= \"colorFormMasterElementTextDisabled\" > #757575 </color>  <color   name= \"colorFormMasterDivider\" > #DDDDDD </color>  <color   name= \"colorFormMasterElementToken\" > #f5f5f5 </color>",
            "title": "Form accent color change"
        },
        {
            "location": "/#form-ui-change",
            "text": "If you want to change how the forms look, just override a form_element XML in your project.  Just make sure to keep the ID name the same as it is in the library for the components.  android : id = \"@+id/formElementTitle\"  android : id = \"@+id/formElementValue\"  ...",
            "title": "Form UI change"
        },
        {
            "location": "/element/base/",
            "text": "Common values used by multiple form elements are stored in the base form element model such as tag, title, and value.\n\n\n\n\nBase Value Requirements\n\n\nNone of the base values are required but providing a title is advised.\n\n\n\n\nTag\n\u00b6\n\n\nThe tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list.\n\n\ntext\n(\n1\n)\n \n{\n\n\n\n}\n\n\nemail\n(\nTag\n.\nEmail\n.\nordinal\n)\n \n{\n\n\n\n}\n\n\n\n\n\n\nval\n \ntextElement\n \n=\n \nformBuilder\n.\ngetElementAtIndex\n(\n0\n)\n \nas\n \nFormSingleLineEditTextElement\n\n\nval\n \nemailElement\n \n=\n \nformBuilder\n.\ngetFormElement\n<\nFormEmailEditTextElement\n>(\nTag\n.\nEmail\n.\nordinal\n)\n\n\n\n\n\n\nTitle\n\u00b6\n\n\nThe title is the text displayed next to the value of the form element.\n\n\ntext\n \n{\n\n    \ntitle\n \n=\n \ngetString\n(\nR\n.\nstring\n.\ntitle\n)\n\n\n}\n\n\n\n\n\n\nValue\n\u00b6\n\n\nThe value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice.\n\n\ntext\n \n{\n\n    \nvalue\n \n=\n \n\"Hello World\"\n\n\n}\n\n\nautoComplete\n<\nContactItem\n>\n \n{\n\n    \nvalue\n \n=\n \nContactItem\n(\nid\n \n=\n \n1\n,\n \nvalue\n \n=\n \n\"John Smith\"\n)\n\n\n}\n\n\n\n\n\n\nValue Observers\n\u00b6\n\n\nThis list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element.\n\n\ntext\n \n{\n\n    \nvalue\n \n=\n \n\"Hello World\"\n\n    \nvalueObservers\n.\nadd\n({\n \nnewValue\n,\n \nelement\n \n->\n\n        \nToast\n.\nmakeText\n(\nthis\n@FormActivity\n,\n \nnewValue\n,\n \nLENGTH_SHORT\n).\nshow\n()\n\n    \n})\n\n\n}\n\n\n\n\n\n\nOptions and Options Selected\n\u00b6\n\n\nThe list of options is used in the Form Picker Dropdown Element and Form Picker MultiCheckBox Element. \nThe list of options selected is in the Form Picker MultiCheckBox Element. \n\n\nprivate\n \nval\n \nfruits\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n2\n,\n \nname\n \n=\n \n\"Orange\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n3\n,\n \nname\n \n=\n \n\"Mango\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n4\n,\n \nname\n \n=\n \n\"Guava\"\n),\n\n    \nListItem\n(\nid\n \n=\n \n5\n,\n \nname\n \n=\n \n\"Apple\"\n)\n\n\n)\n\n\n\ndropDown\n<\nListItem\n>\n \n{\n\n    \noptions\n \n=\n \nfruits\n\n    \nvalue\n \n=\n \nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n)\n\n\n}\n\n\nmultiCheckBox\n<\nListItem\n>\n \n{\n\n    \noptions\n \n=\n \nfruits\n\n    \noptionsSelected\n \n=\n \nlistOf\n(\nListItem\n(\nid\n \n=\n \n1\n,\n \nname\n \n=\n \n\"Banana\"\n))\n\n\n}\n\n\n\n\n\n\nUpdating options later\n\u00b6\n\n\nAfter changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.\n\n\nelement\n.\noptions\n \n=\n \nlistOf\n()\n\n\nelement\n.\nreInitDialog\n(\nthis\n \n/* context */\n,\n \nformBuilder\n)",
            "title": "Base"
        },
        {
            "location": "/element/base/#tag",
            "text": "The tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list.  text ( 1 )   {  }  email ( Tag . Email . ordinal )   {  }   val   textElement   =   formBuilder . getElementAtIndex ( 0 )   as   FormSingleLineEditTextElement  val   emailElement   =   formBuilder . getFormElement < FormEmailEditTextElement >( Tag . Email . ordinal )",
            "title": "Tag"
        },
        {
            "location": "/element/base/#title",
            "text": "The title is the text displayed next to the value of the form element.  text   { \n     title   =   getString ( R . string . title )  }",
            "title": "Title"
        },
        {
            "location": "/element/base/#value",
            "text": "The value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice.  text   { \n     value   =   \"Hello World\"  }  autoComplete < ContactItem >   { \n     value   =   ContactItem ( id   =   1 ,   value   =   \"John Smith\" )  }",
            "title": "Value"
        },
        {
            "location": "/element/base/#value-observers",
            "text": "This list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element.  text   { \n     value   =   \"Hello World\" \n     valueObservers . add ({   newValue ,   element   -> \n         Toast . makeText ( this @FormActivity ,   newValue ,   LENGTH_SHORT ). show () \n     })  }",
            "title": "Value Observers"
        },
        {
            "location": "/element/base/#options-and-options-selected",
            "text": "The list of options is used in the Form Picker Dropdown Element and Form Picker MultiCheckBox Element. \nThe list of options selected is in the Form Picker MultiCheckBox Element.   private   val   fruits   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ), \n     ListItem ( id   =   2 ,   name   =   \"Orange\" ), \n     ListItem ( id   =   3 ,   name   =   \"Mango\" ), \n     ListItem ( id   =   4 ,   name   =   \"Guava\" ), \n     ListItem ( id   =   5 ,   name   =   \"Apple\" )  )  dropDown < ListItem >   { \n     options   =   fruits \n     value   =   ListItem ( id   =   1 ,   name   =   \"Banana\" )  }  multiCheckBox < ListItem >   { \n     options   =   fruits \n     optionsSelected   =   listOf ( ListItem ( id   =   1 ,   name   =   \"Banana\" ))  }",
            "title": "Options and Options Selected"
        },
        {
            "location": "/element/base/#updating-options-later",
            "text": "After changing the options in the model for a Dropdown or MultiCheckBox element, call the reInitDialog function.  element . options   =   listOf ()  element . reInitDialog ( this   /* context */ ,   formBuilder )",
            "title": "Updating options later"
        },
        {
            "location": "/element/singleLine/",
            "text": "WIP\n\u00b6",
            "title": "Single Line"
        },
        {
            "location": "/element/singleLine/#wip",
            "text": "",
            "title": "WIP"
        },
        {
            "location": "/about/contributing/",
            "text": "../CONTRIBUTING.md",
            "title": "Contributing"
        },
        {
            "location": "/about/credits/",
            "text": "adib2149/FormMaster\n is the original project this Kotlin port is based on\n\n\nshaymargolis/FormMaster\n is used for the generics support and addition of the AutoComplete form element\n\n\nvivchar/RendererRecyclerViewAdapter\n is used to support several types of cells\n\n\nsplitwise/TokenAutoComplete\n is for the AutoCompleteToken form element",
            "title": "Credits"
        }
    ]
}